package com.cx.doorplate.activity;import android.app.Activity;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.os.Bundle;import android.support.v4.content.LocalBroadcastManager;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.SimpleAdapter;import android.widget.TextClock;import android.widget.TextView;import com.yy.doorplate.MyApplication;import com.yy.doorplate.R;import com.yy.doorplate.communication.HttpProcess;import com.yy.doorplate.database.LmInfoDatabase;import com.yy.doorplate.database.NoticeInfoDatabase;import com.yy.doorplate.database.SchoolInfoDatabase;import com.yy.doorplate.database.XyxxDatabase;import com.yy.doorplate.model.LmInfoModel;import com.yy.doorplate.model.NoticeInfoModel;import com.yy.doorplate.model.SchoolInfoModel;import com.yy.doorplate.model.XyxxTypeModel;import com.yy.doorplate.view.CustomTextView;import com.yy.doorplate.view.MyPullUpListView;import com.yy.doorplate.view.MyPullUpListView.IloadListener;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class CXJingBaoActivity extends Activity implements OnClickListener{    //警报    private final String TAG = "CXNoticeListActivity";    private MyApplication application;    private RelativeLayout ly_notice_xxxw;    private Button btn_noticelist_back;    //	private ImageView img_notice_title;    private TextView txt_weather;    private TextClock textClock;    private CustomTextView txt_school_name;    private LocalBroadcastManager broadcastManager;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.cx_activity_jingbao);        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        application = (MyApplication) getApplicationContext();        broadcastManager = LocalBroadcastManager.getInstance(this);        IntentFilter filter = new IntentFilter(MyApplication.BROADCAST);        initView();    }    private void initView() {        btn_noticelist_back = (Button) findViewById(R.id.btn_noticelist_back);//		img_notice_title = (ImageView) findViewById(R.id.img_notice_title);        txt_weather = (TextView) findViewById(R.id.txt_weather);        txt_school_name = (CustomTextView) findViewById(R.id.txt_school_name);        textClock = (TextClock) findViewById(R.id.textClock);        textClock.setFormat12Hour(null);        textClock.setFormat24Hour("yyyy年MM月dd日\nEEEE      HH : mm");        btn_noticelist_back.setOnClickListener(this);        txt_weather.setText(application.currentCity.trim() + "   "                + application.temperature.trim() + "\n"                + application.weather.trim());    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.btn_noticelist_back:                finish();                break;        }    }    @Override    protected void onDestroy() {        super.onDestroy();    }    @Override    protected void onStart() {        super.onStart();        application.handler_touch.removeMessages(0);        application.handler_touch.sendEmptyMessageDelayed(0,                application.screensaver_time * 1000);    }    @Override    public boolean dispatchKeyEvent(KeyEvent event) {        switch (event.getAction()) {            case KeyEvent.ACTION_DOWN:                application.handler_touch.removeMessages(0);                break;            case KeyEvent.ACTION_UP:                application.handler_touch.sendEmptyMessageDelayed(0,                        application.screensaver_time * 1000);                break;        }        return super.dispatchKeyEvent(event);    }    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        switch (ev.getAction()) {            case MotionEvent.ACTION_DOWN:                application.handler_touch.removeMessages(0);                break;            case MotionEvent.ACTION_UP:                application.handler_touch.sendEmptyMessageDelayed(0,                        application.screensaver_time * 1000);                break;        }        return super.dispatchTouchEvent(ev);    }}