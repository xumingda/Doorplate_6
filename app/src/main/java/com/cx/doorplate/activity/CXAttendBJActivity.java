package com.cx.doorplate.activity;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.List;import android.app.Activity;import android.app.ProgressDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Color;import android.os.Bundle;import android.support.v4.content.LocalBroadcastManager;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.GridView;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextClock;import android.widget.TextView;import com.alibaba.fastjson.JSONArray;import com.github.mikephil.charting.charts.PieChart;import com.github.mikephil.charting.components.Legend;import com.github.mikephil.charting.data.Entry;import com.github.mikephil.charting.data.PieData;import com.github.mikephil.charting.data.PieDataSet;import com.github.mikephil.charting.formatter.PercentFormatter;import com.github.mikephil.charting.highlight.Highlight;import com.github.mikephil.charting.listener.OnChartValueSelectedListener;import com.github.mikephil.charting.utils.ColorTemplate;import com.yy.doorplate.MyApplication;import com.yy.doorplate.R;import com.yy.doorplate.communication.HttpProcess;import com.yy.doorplate.database.OnDutyInfoDatabase;import com.yy.doorplate.database.PersonnelAttendanceDatabase;import com.yy.doorplate.database.StudentInfoDatabase;import com.yy.doorplate.model.OnDutyInfoModel;import com.yy.doorplate.model.PersonnelAttendanceModel;import com.yy.doorplate.model.StudentInfoModel;import com.yy.doorplate.view.CustomTextView;public class CXAttendBJActivity extends Activity {    private final String TAG = "CXAttendBJActivity";    private MyApplication application;    private LocalBroadcastManager broadcastManager;    private MyBroadcastReceiver myBroadcastReceiver;    private Button btn_cx_back;    private CustomTextView txt_attendbj_name;    private TextView txt_weather, txt_attend_js, txt_attend_yd;    private TextClock textClock;    private GridView gv_attend;    private PieChart chart;    private List<PersonnelAttendanceModel> attendInfoModels;    private ProgressDialog progressDialog = null;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.cx_activity_attendbj);        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        application = (MyApplication) getApplicationContext();        broadcastManager = LocalBroadcastManager.getInstance(this);        myBroadcastReceiver = new MyBroadcastReceiver();        IntentFilter filter = new IntentFilter();        filter.addAction(MyApplication.BROADCAST);        broadcastManager.registerReceiver(myBroadcastReceiver, filter);        initView();        showProgressDialog();        application.httpProcess.QryPersonAttend2(null, MyApplication.getTime("yyyy-MM-dd"), "");    }    private void initView() {        btn_cx_back = (Button) findViewById(R.id.btn_cx_back);        txt_attendbj_name = (CustomTextView) findViewById(R.id.txt_attendbj_name);        txt_weather = (TextView) findViewById(R.id.txt_weather);        txt_attend_js = (TextView) findViewById(R.id.txt_attend_js);        txt_attend_yd = (TextView) findViewById(R.id.txt_attend_yd);        gv_attend = (GridView) findViewById(R.id.gv_attend);        chart = (PieChart) findViewById(R.id.chart);        textClock = (TextClock) findViewById(R.id.textClock);        textClock.setFormat12Hour(null);        textClock.setFormat24Hour("yyyy年MM月dd日\nEEEE      HH : mm");//		txt_weather.setText(application.currentCity.trim() + "   " + application.temperature.trim() + "\n"//				+ application.weather.trim());        btn_cx_back.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });    }    private void initDate() {        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        PersonnelAttendanceDatabase database = new PersonnelAttendanceDatabase();        List<PersonnelAttendanceModel> list = database.query("date = ?",                new String[] { MyApplication.getTime("yyyy-MM-dd") });        String toWorkTime = null;        long now = System.currentTimeMillis();        try {            if (list != null && list.size() > 0) {                for (PersonnelAttendanceModel model : list) {                    long offWorkTime = formatter.parse(model.date + " " + model.offWorkTime).getTime();                    if (now < offWorkTime) {                        toWorkTime = model.toWorkTime;                        break;                    }                }                if (TextUtils.isEmpty(toWorkTime)) {                    toWorkTime = list.get(list.size() - 1).toWorkTime;                }            }        } catch (Exception e) {            e.printStackTrace();        }        attendInfoModels = database.query("date = ? and toWorkTime = ? and js = ?",                new String[] { MyApplication.getTime("yyyy-MM-dd"), toWorkTime, "2" });    }    private void updataAttend() {        if (application.classInfoModel == null) {            return;        }        String title = "班级考勤 ( " + application.classInfoModel.bjmc + " " + MyApplication.getTime("EE");        if (attendInfoModels != null && attendInfoModels.size()>0) {            MyAdapter adapter = new MyAdapter(attendInfoModels);            gv_attend.setAdapter(adapter);            int count = 0;            for (PersonnelAttendanceModel model : attendInfoModels) {                if (model.status.split(",")[0].equals("0") || model.status.split(",")[0].equals("3")) {                    count++;                }            }            txt_attend_yd.setText("应到人数 : " + attendInfoModels.size() + "\t\t\t本节课出勤率 : "                    + (float) (count * 100 / attendInfoModels.size()) + "%");            String js = "";            if (!TextUtils.isEmpty(application.classInfoModel.fdyxm)) {                js = js + "班主任 : " + application.classInfoModel.fdyxm;            }            OnDutyInfoDatabase database = new OnDutyInfoDatabase();            List<OnDutyInfoModel> onDutyInfoModels = database.query_by_date(MyApplication.getTime("yyyy-MM-dd"));            if (onDutyInfoModels != null && onDutyInfoModels.size() > 0) {                String s = "";                for (OnDutyInfoModel model : onDutyInfoModels) {                    s = s + model.xm + " ";                }                js = js + "\n今日值日生 :\n" + s;            }            txt_attend_js.setText(js);            title = title + " " + attendInfoModels.get(0).toWorkTime.substring(0, 5) + "-"                    + attendInfoModels.get(0).offWorkTime.substring(0, 5) + " )";        } else {            gv_attend.setAdapter(null);            txt_attend_js.setText("");            txt_attend_yd.setText("");            title = title + " )";        }        txt_attendbj_name.setText(title);        initChart();        setPieData();    }    private void initChart() {        // 显示百分比        chart.setUsePercentValues(true);        // 描述信息        chart.setDescription("");        // 设置偏移量        // chart.setExtraOffsets(0, 0, 0, 0);        // 设置滑动减速摩擦系数        // chart.setDragDecelerationFrictionCoef(0.95f);        // chart.setCenterText("测试饼图，中间文字");        // 设置是否显示中间的文字        // chart.setDrawCenterText(true);        // 设置饼图中心是否是空心的 true 中间是空心的，环形图 false 中间是实心的 饼图        chart.setDrawHoleEnabled(true);        // 设置中间空心圆孔的颜色是否透明 true 透明的 false 非透明的        chart.setHoleColorTransparent(true);        // 设置环形图和中间空心圆之间的圆环的颜色        // chart.setTransparentCircleColor(Color.WHITE);        // 设置环形图和中间空心圆之间的圆环的透明度        // chart.setTransparentCircleAlpha(110);        // 设置圆孔半径        chart.setHoleRadius(70);        // 设置空心圆的半径        // chart.setTransparentCircleRadius(60);        // 初始旋转角度        chart.setRotationAngle(0);        // 可以手动旋转        chart.setRotationEnabled(false);        // 设置隐藏饼图上文字，只显示百分比        chart.setDrawSliceText(true);        // 如果没有数据的时候，会显示这个，类似ListView的EmptyView        chart.setNoDataText("");        // 设置动画        // chart.animateY(1400, Easing.EasingOption.EaseInOutQuad);        Legend mLegend = chart.getLegend(); // 设置比例图        mLegend.setPosition(Legend.LegendPosition.ABOVE_CHART_LEFT); // 左上边显示        mLegend.setFormSize(25f);// 比例块大小        mLegend.setTextSize(20f);        mLegend.setXEntrySpace(30);// 设置距离饼图的距离，防止与饼图重合        mLegend.setYEntrySpace(20);        // 设置比例块换行...        mLegend.setWordWrapEnabled(true);        // mLegend.setDirection(Legend.LegendDirection.LEFT_TO_RIGHT);        mLegend.setTextColor(getResources().getColor(R.color.black));        mLegend.setForm(Legend.LegendForm.SQUARE);// 设置比例块形状，默认为方块        // mLegend.setEnabled(false);// 设置禁用比例块    }    private ArrayList<String> xVals = new ArrayList<String>();    private void setPieData() {        if (attendInfoModels != null && attendInfoModels.size() > 0) {            float total = attendInfoModels.size();            float c0 = 0, c1 = 0, c2 = 0, c3 = 0, c4 = 0, c5 = 0, c6 = 0, c7 = 0, c8 = 0, c9 = 0, c10 = 0, c11 = 0;            float quarterly0, quarterly1, quarterly2, quarterly3, quarterly4, quarterly5, quarterly6, quarterly7,                    quarterly8, quarterly9, quarterly10, quarterly11;            Log.e("toWorkTime",  "attendInfoModels:"+attendInfoModels);            for (PersonnelAttendanceModel model : attendInfoModels) {                String kqzt = model.status.split(",")[0];                if (!kqzt.equals("4") && model.status.split(",").length > 1 && model.status.split(",")[1].equals("5")) {                    c5++;                    continue;                }                if (kqzt.equals("0")) {                    c0++;                } else if (kqzt.equals("1")) {                    c1++;                } else if (kqzt.equals("2")) {                    c2++;                } else if (kqzt.equals("3")) {                    c3++;                } else if (kqzt.equals("4")) {                    c4++;                } else if (kqzt.equals("5")) {                    c5++;                } else if (kqzt.equals("6")) {                    c6++;                } else if (kqzt.equals("7")) {                    c7++;                } else if (kqzt.equals("8")) {                    c8++;                } else if (kqzt.equals("13")) {                    c9++;                } else if (kqzt.equals("10")) {                    c10++;                } else if (kqzt.equals("11")) {                    c11++;                }            }            Log.e("c0","c0:"+c0);            quarterly0 = c0 / total * 100;            quarterly1 = c1 / total * 100;            quarterly2 = c2 / total * 100;            quarterly3 = c3 / total * 100;            quarterly4 = c4 / total * 100;            quarterly5 = c5 / total * 100;            quarterly6 = c6 / total * 100;            quarterly7 = c7 / total * 100;            quarterly8 = c8 / total * 100;            quarterly9 = c9 / total * 100;            quarterly10 = c10 / total * 100;            quarterly11 = c11 / total * 100;            xVals = new ArrayList<String>();            ArrayList<Entry> yVals1 = new ArrayList<Entry>();            ArrayList<Integer> colors = new ArrayList<Integer>();            int i = 0;            if (quarterly0 != 0) {                xVals.add("已签到");                yVals1.add(new Entry(quarterly0, i++));                colors.add(getResources().getColor(R.color.attend_0));            }            if (quarterly1 != 0) {                xVals.add("事假");                yVals1.add(new Entry(quarterly1, i++));                colors.add(getResources().getColor(R.color.attend_1));            }            if (quarterly2 != 0) {                xVals.add("病假");                yVals1.add(new Entry(quarterly2, i++));                colors.add(getResources().getColor(R.color.attend_2));            }            if (quarterly3 != 0) {                xVals.add("迟到");                yVals1.add(new Entry(quarterly3, i++));                colors.add(getResources().getColor(R.color.attend_3));            }            if (quarterly4 != 0) {                xVals.add("旷课");                yVals1.add(new Entry(quarterly4, i++));                colors.add(getResources().getColor(R.color.attend_4));            }            if (quarterly5 != 0) {                xVals.add("早退");                yVals1.add(new Entry(quarterly5, i++));                colors.add(getResources().getColor(R.color.attend_5));            }            if (quarterly6 != 0) {                xVals.add("公假");                yVals1.add(new Entry(quarterly6, i++));                colors.add(getResources().getColor(R.color.attend_6));            }            if (quarterly7 != 0) {                xVals.add("实习");                yVals1.add(new Entry(quarterly7, i++));                colors.add(getResources().getColor(R.color.attend_7));            }            if (quarterly8 != 0) {                xVals.add("集训");                yVals1.add(new Entry(quarterly8, i++));                colors.add(getResources().getColor(R.color.attend_8));            }            if (quarterly9 != 0) {                xVals.add("其它");                yVals1.add(new Entry(quarterly9, i++));                colors.add(getResources().getColor(R.color.attend_9));            }            if (quarterly10 != 0) {                xVals.add("缺席");                yVals1.add(new Entry(quarterly10, i++));                colors.add(getResources().getColor(R.color.attend_10));            }            if (quarterly11 != 0) {                xVals.add("未签到");                yVals1.add(new Entry(quarterly11, i++));                colors.add(getResources().getColor(R.color.attend_11));            }            PieDataSet dataSet = new PieDataSet(yVals1, "");            // 设置饼图区块之间的距离            dataSet.setSliceSpace(1);            if (i > 1) {                dataSet.setSelectionShift(30f); // 选中态多出的长度                chart.setOnChartValueSelectedListener(new OnChartValueSelectedListener() {                    @Override                    public void onValueSelected(Entry e, int dataSetIndex, Highlight h) {                        String kqzt = "";                        if (xVals.get(e.getXIndex()).equals("已签到")) {                            kqzt = "0";                        } else if (xVals.get(e.getXIndex()).equals("事假")) {                            kqzt = "1";                        } else if (xVals.get(e.getXIndex()).equals("病假")) {                            kqzt = "2";                        } else if (xVals.get(e.getXIndex()).equals("迟到")) {                            kqzt = "3";                        } else if (xVals.get(e.getXIndex()).equals("旷课")) {                            kqzt = "4";                        } else if (xVals.get(e.getXIndex()).equals("早退")) {                            kqzt = "5";                        } else if (xVals.get(e.getXIndex()).equals("公假")) {                            kqzt = "6";                        } else if (xVals.get(e.getXIndex()).equals("实习")) {                            kqzt = "7";                        } else if (xVals.get(e.getXIndex()).equals("集训")) {                            kqzt = "8";                        } else if (xVals.get(e.getXIndex()).equals("其它")) {                            kqzt = "13";                        } else if (xVals.get(e.getXIndex()).equals("缺席")) {                            kqzt = "10";                        } else if (xVals.get(e.getXIndex()).equals("未签到")) {                            kqzt = "11";                        }                        List<PersonnelAttendanceModel> list = new ArrayList<PersonnelAttendanceModel>();                        if (attendInfoModels != null && attendInfoModels.size() > 0) {                            for (PersonnelAttendanceModel model : attendInfoModels) {                                if (model.status.split(",")[0].equals(kqzt)) {                                    list.add(model);                                } else if ("5".equals(kqzt) && model.status.split(",")[1].equals(kqzt)) {                                    list.add(model);                                }                            }                        }                        MyAdapter adapter = new MyAdapter(list);                        gv_attend.setAdapter(adapter);                    }                    @Override                    public void onNothingSelected() {                        MyAdapter adapter = new MyAdapter(attendInfoModels);                        gv_attend.setAdapter(adapter);                    }                });            } else {                dataSet.setSelectionShift(0f);                chart.setOnChartValueSelectedListener(null);            }            // for (int c : ColorTemplate.VORDIPLOM_COLORS)            // colors.add(c);            // for (int c : ColorTemplate.JOYFUL_COLORS)            // colors.add(c);            // for (int c : ColorTemplate.COLORFUL_COLORS)            // colors.add(c);            // for (int c : ColorTemplate.LIBERTY_COLORS)            // colors.add(c);            // for (int c : ColorTemplate.PASTEL_COLORS)            // colors.add(c);            colors.add(ColorTemplate.getHoloBlue());            dataSet.setColors(colors);            PieData pieData = new PieData(xVals, dataSet);            pieData.setValueFormatter(new PercentFormatter());            pieData.setValueTextSize(20f);            pieData.setValueTextColor(Color.WHITE);            chart.setData(pieData);            chart.highlightValues(null);            chart.invalidate();        } else {            chart.setData(null);        }    }    private class MyAdapter extends BaseAdapter {        private List<PersonnelAttendanceModel> attendInfoModels = null;        public MyAdapter(List<PersonnelAttendanceModel> attendInfoModels) {            this.attendInfoModels = attendInfoModels;        }        @Override        public int getCount() {            return attendInfoModels.size();        }        @Override        public Object getItem(int position) {            return attendInfoModels.get(position);        }        @Override        public long getItemId(int position) {            return position;        }        private class ViewHolder {            private RelativeLayout ly_item_attend;            private ImageView img_item_attend;            private TextView txt_item_attend;        }        @Override        public View getView(int position, View view, ViewGroup parent) {            ViewHolder viewHolder = null;            if (viewHolder == null) {                viewHolder = new ViewHolder();                view = LayoutInflater.from(application).inflate(R.layout.cx_item_attend, null);                viewHolder.ly_item_attend = (RelativeLayout) view.findViewById(R.id.ly_item_attend);                viewHolder.img_item_attend = (ImageView) view.findViewById(R.id.img_item_attend);                viewHolder.txt_item_attend = (TextView) view.findViewById(R.id.txt_item_attend);                view.setTag(viewHolder);            } else {                viewHolder = (ViewHolder) view.getTag();            }//			view.setLayoutParams(new GridView.LayoutParams(90, 90));            viewHolder.txt_item_attend.setText(attendInfoModels.get(position).xm);            StudentInfoDatabase database = new StudentInfoDatabase();            StudentInfoModel studentInfoModel = database.query_by_xsxh(attendInfoModels.get(position).rybh);            if (studentInfoModel != null && "2".equals(studentInfoModel.xb)) {                viewHolder.img_item_attend.setImageResource(R.drawable.img_people);            } else {                viewHolder.img_item_attend.setImageResource(R.drawable.img_people);            }            if (!"4".equals(attendInfoModels.get(position).status.split(",")[0])                    && "5".equals(attendInfoModels.get(position).status.split(",")[1])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_5);            } else if ("0".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_0);            } else if ("1".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_1);            } else if ("2".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_2);            } else if ("3".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_3);            } else if ("4".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_4);            } else if ("6".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_6);            } else if ("7".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_7);            } else if ("8".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_8);            } else if ("13".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_9);            } else if ("10".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_10);            } else if ("11".equals(attendInfoModels.get(position).status.split(",")[0])) {                viewHolder.ly_item_attend.setBackgroundResource(R.drawable.cx_btn_attend_11);            }            viewHolder.ly_item_attend.getBackground().setAlpha(220);            return view;        }    }    private class MyBroadcastReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            if (!intent.getAction().equals(MyApplication.BROADCAST)) {                return;            }            String tag = intent.getStringExtra(MyApplication.BROADCAST_TAG);            if (tag.equals("permission_finish")) {                closeProgressDialog();                finish();            } else if (tag.equals(HttpProcess.QRY_PERSONATTEND2) && application.isSynComplete                    && application.getRunningActivityName().equals("com.cx.doorplate.activity.CXAttendBJActivity")                    && !application.isUpdateEQ) {                String personnelAttendanceList = intent.getStringExtra("personnelAttendanceList");                //直接获取                initDate();//				attendInfoModels = JSONArray.parseArray(personnelAttendanceList, PersonnelAttendanceModel.class);                updataAttend();                closeProgressDialog();                boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);                String msg = intent.getStringExtra(MyApplication.CMD_MSG);                if (!result) {                    application.showToast("查询考勤失败，原因 : " + msg);                }            }        }    }    @Override    protected void onStart() {        super.onStart();        application.handler_touch.removeMessages(0);        application.handler_touch.sendEmptyMessageDelayed(0, application.screensaver_time * 1000);    }    @Override    protected void onDestroy() {        super.onDestroy();        broadcastManager.unregisterReceiver(myBroadcastReceiver);    }    @Override    public boolean dispatchKeyEvent(KeyEvent event) {        switch (event.getAction()) {            case KeyEvent.ACTION_DOWN:                application.handler_touch.removeMessages(0);                break;            case KeyEvent.ACTION_UP:                application.handler_touch.sendEmptyMessageDelayed(0, application.screensaver_time * 1000);                break;        }        return super.dispatchKeyEvent(event);    }    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        switch (ev.getAction()) {            case MotionEvent.ACTION_DOWN:                application.handler_touch.removeMessages(0);                break;            case MotionEvent.ACTION_UP:                application.handler_touch.sendEmptyMessageDelayed(0, application.screensaver_time * 1000);                break;        }        return super.dispatchTouchEvent(ev);    }    private void showProgressDialog() {        application.isGrxx = true;        if (progressDialog == null) {            progressDialog = ProgressDialog.show(this, null, "加载中", false, false);        }    }    private void closeProgressDialog() {        if (progressDialog != null && progressDialog.isShowing()) {            progressDialog.dismiss();            progressDialog = null;        }        application.isGrxx = false;    }}