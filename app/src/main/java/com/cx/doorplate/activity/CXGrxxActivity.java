package com.cx.doorplate.activity;import java.io.File;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import android.app.ProgressDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.Typeface;import android.os.Bundle;import android.os.Handler;import android.os.IBinder;import android.os.Message;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentActivity;import android.support.v4.content.LocalBroadcastManager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnFocusChangeListener;import android.view.ViewGroup;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.webkit.WebSettings;import android.webkit.WebView;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.GridView;import android.widget.HorizontalScrollView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.RadioGroup;import android.widget.RelativeLayout;import android.widget.TextClock;import android.widget.TextView;import com.alibaba.fastjson.JSONArray;import com.cx.doorplate.fragment.GrxxHonorFragment;import com.cx.doorplate.fragment.GrxxVideoFragment;import com.github.mikephil.charting.charts.BarChart;import com.github.mikephil.charting.components.Legend;import com.github.mikephil.charting.components.XAxis;import com.github.mikephil.charting.components.YAxis;import com.github.mikephil.charting.data.BarData;import com.github.mikephil.charting.data.BarDataSet;import com.github.mikephil.charting.data.BarEntry;import com.github.mikephil.charting.data.Entry;import com.github.mikephil.charting.formatter.ValueFormatter;import com.github.mikephil.charting.utils.ViewPortHandler;import com.nostra13.universalimageloader.core.DisplayImageOptions;import com.nostra13.universalimageloader.core.assist.ImageScaleType;import com.yy.doorplate.MyApplication;import com.yy.doorplate.R;import com.yy.doorplate.activity.VideoPlayActivity;import com.yy.doorplate.adapter.MyViewPagerAdapter;import com.yy.doorplate.communication.FTPManager;import com.yy.doorplate.communication.HttpProcess;import com.yy.doorplate.database.PrizeInfoDatabase;import com.yy.doorplate.database.SectionInfoDatabase;import com.yy.doorplate.database.TeacherInfoDatabase;import com.yy.doorplate.database.VideoDatabase;import com.yy.doorplate.model.CurriculumInfoModel;import com.yy.doorplate.model.LeaveModel;import com.yy.doorplate.model.LeaveMsgModel;import com.yy.doorplate.model.PersonInfoModel;import com.yy.doorplate.model.PersonnelAttendanceModel;import com.yy.doorplate.model.PrizeInfoModel;import com.yy.doorplate.model.SectionInfoModel;import com.yy.doorplate.model.StudentInfoModel;import com.yy.doorplate.model.TeacherInfoModel;import com.yy.doorplate.model.VideoInfoModel;import com.yy.doorplate.tool.DateUtils;import com.yy.doorplate.tool.ImageLoader;import com.yy.doorplate.tool.ImageLoader.OnImageLoaderListener;import com.yy.doorplate.view.CustomTextView;import com.yy.doorplate.view.CustomViewpager;import com.yy.doorplate.view.MyPullUpListView;import com.yy.doorplate.view.MyPullUpListView.IloadListener;public class CXGrxxActivity extends FragmentActivity		implements OnClickListener, OnItemClickListener, OnFocusChangeListener, IloadListener {	private final String TAG = "CXGrxxActivity";	private MyApplication application;	private LocalBroadcastManager broadcastManager;	private MyBroadcastReceiver myBroadcastReceiver;	private ImageLoader imageLoader;	private RelativeLayout ly_grxx_nop, ly_grxx, ly_grxx_info, ly_grxx_honor, ly_grxx_video, ly_grxx_curriculum,			ly_grxx_attend, ly_grxx_msg, ly_grxx_leave, ly_grxx_msg_content;	private LinearLayout ly_curriculum_week, ly_curriculum_ampm, ly_grxx_attend_day;	private Button btn_cx_back, btn_grxx_info, btn_grxx_honor, btn_grxx_video, btn_grxx_curriculum, btn_grxx_attend,			btn_grxx_msg, btn_grxx_leave, btn_honor_left, btn_honor_right, btn_video_left, btn_video_right,			btn_grxx_attend_left, btn_grxx_attend_right, btn_grxx_leave_commit, btn_grxx_msg_commit;	private TextView txt_weather, txt_student_1, txt_student_2, txt_student_3, txt_student_4, txt_grxx_attend_table,			txt_grxx_attend1, txt_grxx_attend2, txt_grxx_attend3, txt_grxx_msg_name;	private TextClock textClock;	private ImageView img_student_touxiang;	private CustomViewpager vp_honor, vp_video;	private GridView gv_curriculum, gv_grxx_attend;	private BarChart barchart;	private HorizontalScrollView sv_grxx_attend_day;	private EditText edt_grxx_leave, edt_grxx_msg;	private RadioGroup rg_grxx_leave;	private ListView lv_grxx_msg;	private MyPullUpListView list_leave, list_msg_user;	private ProgressDialog progressDialog = null;	private PrizeInfoDatabase prizeInfoDatabase = new PrizeInfoDatabase();	private VideoDatabase videoDatabase = new VideoDatabase();	private String rybh, card;	private StudentInfoModel studentInfoModel;	private List<PrizeInfoModel> prizeInfoModels;	private List<VideoInfoModel> videoInfoModels;	private int vedioInfoModels_i = 0;	private List<SectionInfoModel> sectionModels;	private List<CurriculumInfoModel> curriculumInfoModels = new ArrayList<CurriculumInfoModel>();	private List<PersonnelAttendanceModel> attendanceModels;	private SimpleDateFormat format;	private Calendar calendar = Calendar.getInstance();	private Date date_1, date_2, date_3, date_4, date_5, date_6, date_7, date_click;	private int week = 5, curriculum_num = 8, curriculum_num_am = 4, curriculum_num_pm = 4;	private List<Fragment> fragments;	private int fragment_total, fragment_i;	private List<Fragment> videoFragments;	private int videoFragment_total, videoFragment_i;	private DisplayImageOptions options;	private com.nostra13.universalimageloader.core.ImageLoader loader;	private int year, month;	private List<Map<String, Object>> maps = new ArrayList<Map<String, Object>>();	private AttendAdapter attendAdapter;	private List<LeaveModel> leaveModels;	private int leave_page = 0, leave_count = 10, leave_total = 0;	private LeaveAdapter leaveAdapter;	private boolean isInputMethod = false, isUpateLeave = false;	private List<PersonInfoModel> listMsgUser;	private MsgUserAdapter msgUserAdapter;	// 选中的留言对象	private PersonInfoModel personInfoModel;	// 当前正在操作的留言	private LeaveMsgModel leaveMsgModel;	private List<LeaveMsgModel> leaveMsgModels;	private int msg_page = 0, msg_count = 1000000, msg_total = 0;	private int msguser_page = 0, msguser_count = 1000000, msguser_total = 0;	private MsgAdapter msgAdapter;	// 1基本信息,2考勤记录,3我的课表,4家校留言,5在线请假,6个人荣誉,7风采展示	private int from = 0;	private TextView tv_test;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.cx_activity_grxx);		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);		application = (MyApplication) getApplicationContext();		broadcastManager = LocalBroadcastManager.getInstance(this);		myBroadcastReceiver = new MyBroadcastReceiver();		IntentFilter filter = new IntentFilter();		filter.addAction(MyApplication.BROADCAST);		broadcastManager.registerReceiver(myBroadcastReceiver, filter);		imageLoader = new ImageLoader(application);		application.cardType = "QRY_PERSON_GRXX";		from = getIntent().getIntExtra("from", 1);		initView();		try {			getWeek(System.currentTimeMillis());		} catch (ParseException e) {			e.printStackTrace();		}	}	private void initView() {		tv_test= (TextView) findViewById(R.id.tv_test);		ly_grxx_nop = (RelativeLayout) findViewById(R.id.ly_grxx_nop);		ly_grxx = (RelativeLayout) findViewById(R.id.ly_grxx);		ly_grxx_info = (RelativeLayout) findViewById(R.id.ly_grxx_info);		ly_grxx_honor = (RelativeLayout) findViewById(R.id.ly_grxx_honor);		ly_grxx_video = (RelativeLayout) findViewById(R.id.ly_grxx_video);		ly_grxx_curriculum = (RelativeLayout) findViewById(R.id.ly_grxx_curriculum);		ly_grxx_attend = (RelativeLayout) findViewById(R.id.ly_grxx_attend);		ly_grxx_leave = (RelativeLayout) findViewById(R.id.ly_grxx_leave);		ly_grxx_msg = (RelativeLayout) findViewById(R.id.ly_grxx_msg);		ly_grxx_msg_content = (RelativeLayout) findViewById(R.id.ly_grxx_msg_content);		ly_curriculum_week = (LinearLayout) findViewById(R.id.ly_curriculum_week);		ly_curriculum_ampm = (LinearLayout) findViewById(R.id.ly_curriculum_ampm);		ly_grxx_attend_day = (LinearLayout) findViewById(R.id.ly_grxx_attend_day);		btn_cx_back = (Button) findViewById(R.id.btn_cx_back);		btn_grxx_info = (Button) findViewById(R.id.btn_grxx_info);		btn_grxx_honor = (Button) findViewById(R.id.btn_grxx_honor);		btn_grxx_video = (Button) findViewById(R.id.btn_grxx_video);		btn_grxx_curriculum = (Button) findViewById(R.id.btn_grxx_curriculum);		btn_grxx_attend = (Button) findViewById(R.id.btn_grxx_attend);		btn_grxx_msg = (Button) findViewById(R.id.btn_grxx_msg);		btn_grxx_leave = (Button) findViewById(R.id.btn_grxx_leave);		btn_honor_left = (Button) findViewById(R.id.btn_honor_left);		btn_honor_right = (Button) findViewById(R.id.btn_honor_right);		btn_video_left = (Button) findViewById(R.id.btn_video_left);		btn_video_right = (Button) findViewById(R.id.btn_video_right);		btn_grxx_attend_left = (Button) findViewById(R.id.btn_grxx_attend_left);		btn_grxx_attend_right = (Button) findViewById(R.id.btn_grxx_attend_right);		btn_grxx_leave_commit = (Button) findViewById(R.id.btn_grxx_leave_commit);		btn_grxx_msg_commit = (Button) findViewById(R.id.btn_grxx_msg_commit);		txt_weather = (TextView) findViewById(R.id.txt_weather);		txt_student_1 = (TextView) findViewById(R.id.txt_student_1);		txt_student_2 = (TextView) findViewById(R.id.txt_student_2);		txt_student_3 = (TextView) findViewById(R.id.txt_student_3);		txt_student_4 = (TextView) findViewById(R.id.txt_student_4);		txt_grxx_attend_table = (TextView) findViewById(R.id.txt_grxx_attend_table);		txt_grxx_attend1 = (TextView) findViewById(R.id.txt_grxx_attend1);		txt_grxx_attend2 = (TextView) findViewById(R.id.txt_grxx_attend2);		txt_grxx_attend3 = (TextView) findViewById(R.id.txt_grxx_attend3);		txt_grxx_msg_name = (TextView) findViewById(R.id.txt_grxx_msg_name);		img_student_touxiang = (ImageView) findViewById(R.id.img_student_touxiang);		vp_honor = (CustomViewpager) findViewById(R.id.vp_honor);		vp_video = (CustomViewpager) findViewById(R.id.vp_video);		gv_curriculum = (GridView) findViewById(R.id.gv_curriculum);		gv_grxx_attend = (GridView) findViewById(R.id.gv_grxx_attend);		barchart = (BarChart) findViewById(R.id.barchart);		sv_grxx_attend_day = (HorizontalScrollView) findViewById(R.id.sv_grxx_attend_day);		edt_grxx_leave = (EditText) findViewById(R.id.edt_grxx_leave);		edt_grxx_msg = (EditText) findViewById(R.id.edt_grxx_msg);		rg_grxx_leave = (RadioGroup) findViewById(R.id.rg_grxx_leave);		lv_grxx_msg = (ListView) findViewById(R.id.lv_grxx_msg);		list_leave = (MyPullUpListView) findViewById(R.id.list_leave);		list_msg_user = (MyPullUpListView) findViewById(R.id.list_msg_user);		view = findViewById(R.id.cx_include_teacher);		img_teacher_touxiang = (ImageView) view.findViewById(R.id.img_teacher_touxiang);		txt_teacher_1 = (TextView) view.findViewById(R.id.txt_teacher_1);		txt_teacher_2 = (TextView) view.findViewById(R.id.txt_teacher_2);		webView = (WebView) view.findViewById(R.id.webView);		textClock = (TextClock) findViewById(R.id.textClock);		textClock.setFormat12Hour(null);		textClock.setFormat24Hour("yyyy年MM月dd日\nEEEE      HH : mm");		txt_weather.setText(application.currentCity.trim() + "   " + application.temperature.trim() + "\n"				+ application.weather.trim());		btn_cx_back.setOnClickListener(this);		btn_grxx_info.setOnClickListener(this);		btn_grxx_honor.setOnClickListener(this);//		btn_grxx_video.setOnClickListener(this);		btn_grxx_curriculum.setOnClickListener(this);		btn_grxx_attend.setOnClickListener(this);		btn_grxx_msg.setOnClickListener(this);		btn_grxx_leave.setOnClickListener(this);		btn_honor_left.setOnClickListener(this);		btn_honor_right.setOnClickListener(this);		btn_video_left.setOnClickListener(this);		btn_video_right.setOnClickListener(this);		btn_grxx_attend_left.setOnClickListener(this);		btn_grxx_attend_right.setOnClickListener(this);		btn_grxx_leave_commit.setOnClickListener(this);		btn_grxx_msg_commit.setOnClickListener(this);//		edt_grxx_leave.setOnClickListener(this);//		edt_grxx_msg.setOnClickListener(this);//		edt_grxx_leave.setOnFocusChangeListener(this);//		edt_grxx_msg.setOnFocusChangeListener(this);		gv_grxx_attend.setOnItemClickListener(this);		list_msg_user.setOnItemClickListener(this);		list_leave.setInterface(this);		vp_honor.setOnPageChangeListener(new OnPageChangeListener() {			@Override			public void onPageSelected(int arg0) {				fragment_i = arg0;			}			@Override			public void onPageScrolled(int arg0, float arg1, int arg2) {			}			@Override			public void onPageScrollStateChanged(int arg0) {			}		});		vp_video.setOnPageChangeListener(new OnPageChangeListener() {			@Override			public void onPageSelected(int arg0) {				videoFragment_i = arg0;			}			@Override			public void onPageScrolled(int arg0, float arg1, int arg2) {			}			@Override			public void onPageScrollStateChanged(int arg0) {			}		});		year = DateUtils.getYear();		month = DateUtils.getMonth();		loader = com.nostra13.universalimageloader.core.ImageLoader.getInstance();		options = new DisplayImageOptions.Builder().showStubImage(R.drawable.ic_launcher)				.showImageForEmptyUri(R.drawable.ic_launcher).showImageOnFail(R.drawable.ic_launcher)				.cacheInMemory(true).cacheOnDisk(true).imageScaleType(ImageScaleType.IN_SAMPLE_INT)				.bitmapConfig(Bitmap.Config.ARGB_8888).build();	}	// 显示未刷卡界面	private void updataNoView() {		ly_grxx_nop.setVisibility(View.VISIBLE);		ly_grxx.setVisibility(View.INVISIBLE);		btn_grxx_info.setVisibility(View.INVISIBLE);		btn_grxx_honor.setVisibility(View.INVISIBLE);		btn_grxx_video.setVisibility(View.INVISIBLE);		btn_grxx_curriculum.setVisibility(View.INVISIBLE);		btn_grxx_attend.setVisibility(View.INVISIBLE);		btn_grxx_msg.setVisibility(View.INVISIBLE);		btn_grxx_leave.setVisibility(View.INVISIBLE);		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);		if (imm != null) {			imm.hideSoftInputFromWindow(edt_grxx_leave.getWindowToken(), 0);			imm.hideSoftInputFromWindow(edt_grxx_msg.getWindowToken(), 0);		}		isInputMethod = false;	}	// 显示个人信息界面	private void updataInfoView() {		ly_grxx_nop.setVisibility(View.INVISIBLE);		ly_grxx.setVisibility(View.VISIBLE);		ly_grxx_info.setVisibility(View.VISIBLE);		ly_grxx_honor.setVisibility(View.INVISIBLE);		ly_grxx_video.setVisibility(View.INVISIBLE);		ly_grxx_curriculum.setVisibility(View.INVISIBLE);		ly_grxx_attend.setVisibility(View.INVISIBLE);		ly_grxx_leave.setVisibility(View.INVISIBLE);		ly_grxx_msg.setVisibility(View.INVISIBLE);		btn_grxx_info.setBackgroundResource(R.drawable.cx_btn_grxx_table_click);		btn_grxx_honor.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_video.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_curriculum.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_attend.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_msg.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_leave.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_info.setTextColor(Color.parseColor("#b36010"));		btn_grxx_honor.setTextColor(Color.parseColor("#787878"));		btn_grxx_video.setTextColor(Color.parseColor("#787878"));		btn_grxx_curriculum.setTextColor(Color.parseColor("#787878"));		btn_grxx_attend.setTextColor(Color.parseColor("#787878"));		btn_grxx_msg.setTextColor(Color.parseColor("#787878"));		btn_grxx_leave.setTextColor(Color.parseColor("#787878"));		btn_grxx_info.setVisibility(View.VISIBLE);		btn_grxx_honor.setVisibility(View.VISIBLE);//		btn_grxx_video.setVisibility(View.VISIBLE);		btn_grxx_curriculum.setVisibility(View.VISIBLE);		btn_grxx_attend.setVisibility(View.VISIBLE);		btn_grxx_msg.setVisibility(View.VISIBLE);		btn_grxx_leave.setVisibility(View.VISIBLE);		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);		if (imm != null) {			imm.hideSoftInputFromWindow(edt_grxx_leave.getWindowToken(), 0);			imm.hideSoftInputFromWindow(edt_grxx_msg.getWindowToken(), 0);		}		isInputMethod = false;	}	// 显示荣誉墙界面	private void updataHonorView() {		ly_grxx_nop.setVisibility(View.INVISIBLE);		ly_grxx.setVisibility(View.VISIBLE);		ly_grxx_info.setVisibility(View.INVISIBLE);		ly_grxx_honor.setVisibility(View.VISIBLE);		ly_grxx_video.setVisibility(View.INVISIBLE);		ly_grxx_curriculum.setVisibility(View.INVISIBLE);		ly_grxx_attend.setVisibility(View.INVISIBLE);		ly_grxx_leave.setVisibility(View.INVISIBLE);		ly_grxx_msg.setVisibility(View.INVISIBLE);		btn_grxx_info.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_honor.setBackgroundResource(R.drawable.cx_btn_grxx_table_click);		btn_grxx_video.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_curriculum.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_attend.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_msg.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_leave.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_info.setTextColor(Color.parseColor("#787878"));		btn_grxx_honor.setTextColor(Color.parseColor("#b36010"));		btn_grxx_video.setTextColor(Color.parseColor("#787878"));		btn_grxx_curriculum.setTextColor(Color.parseColor("#787878"));		btn_grxx_attend.setTextColor(Color.parseColor("#787878"));		btn_grxx_msg.setTextColor(Color.parseColor("#787878"));		btn_grxx_leave.setTextColor(Color.parseColor("#787878"));		btn_grxx_info.setVisibility(View.VISIBLE);		btn_grxx_honor.setVisibility(View.VISIBLE);//		btn_grxx_video.setVisibility(View.VISIBLE);		btn_grxx_curriculum.setVisibility(View.VISIBLE);		btn_grxx_attend.setVisibility(View.VISIBLE);		btn_grxx_msg.setVisibility(View.VISIBLE);		btn_grxx_leave.setVisibility(View.VISIBLE);		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);		if (imm != null) {			imm.hideSoftInputFromWindow(edt_grxx_leave.getWindowToken(), 0);			imm.hideSoftInputFromWindow(edt_grxx_msg.getWindowToken(), 0);		}		isInputMethod = false;	}	// 显示视频界面	private void updataVideoView() {		ly_grxx_nop.setVisibility(View.INVISIBLE);		ly_grxx.setVisibility(View.VISIBLE);		ly_grxx_info.setVisibility(View.INVISIBLE);		ly_grxx_honor.setVisibility(View.INVISIBLE);		ly_grxx_video.setVisibility(View.VISIBLE);		ly_grxx_curriculum.setVisibility(View.INVISIBLE);		ly_grxx_attend.setVisibility(View.INVISIBLE);		ly_grxx_leave.setVisibility(View.INVISIBLE);		ly_grxx_msg.setVisibility(View.INVISIBLE);		btn_grxx_info.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_honor.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_video.setBackgroundResource(R.drawable.cx_btn_grxx_table_click);		btn_grxx_curriculum.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_attend.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_msg.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_leave.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_info.setTextColor(Color.parseColor("#787878"));		btn_grxx_honor.setTextColor(Color.parseColor("#787878"));		btn_grxx_video.setTextColor(Color.parseColor("#b36010"));		btn_grxx_curriculum.setTextColor(Color.parseColor("#787878"));		btn_grxx_attend.setTextColor(Color.parseColor("#787878"));		btn_grxx_msg.setTextColor(Color.parseColor("#787878"));		btn_grxx_leave.setTextColor(Color.parseColor("#787878"));		btn_grxx_info.setVisibility(View.VISIBLE);		btn_grxx_honor.setVisibility(View.VISIBLE);//		btn_grxx_video.setVisibility(View.VISIBLE);		btn_grxx_curriculum.setVisibility(View.VISIBLE);		btn_grxx_attend.setVisibility(View.VISIBLE);		btn_grxx_msg.setVisibility(View.VISIBLE);		btn_grxx_leave.setVisibility(View.VISIBLE);		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);		if (imm != null) {			imm.hideSoftInputFromWindow(edt_grxx_leave.getWindowToken(), 0);			imm.hideSoftInputFromWindow(edt_grxx_msg.getWindowToken(), 0);		}		isInputMethod = false;	}	// 显示课程表界面	private void updataCurriculumView() {		ly_grxx_nop.setVisibility(View.INVISIBLE);		ly_grxx.setVisibility(View.VISIBLE);		ly_grxx_info.setVisibility(View.INVISIBLE);		ly_grxx_honor.setVisibility(View.INVISIBLE);		ly_grxx_video.setVisibility(View.INVISIBLE);		ly_grxx_curriculum.setVisibility(View.VISIBLE);		ly_grxx_attend.setVisibility(View.INVISIBLE);		ly_grxx_leave.setVisibility(View.INVISIBLE);		ly_grxx_msg.setVisibility(View.INVISIBLE);		btn_grxx_info.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_honor.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_video.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_curriculum.setBackgroundResource(R.drawable.cx_btn_grxx_table_click);		btn_grxx_attend.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_msg.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_leave.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_info.setTextColor(Color.parseColor("#787878"));		btn_grxx_honor.setTextColor(Color.parseColor("#787878"));		btn_grxx_video.setTextColor(Color.parseColor("#787878"));		btn_grxx_curriculum.setTextColor(Color.parseColor("#b36010"));		btn_grxx_attend.setTextColor(Color.parseColor("#787878"));		btn_grxx_msg.setTextColor(Color.parseColor("#787878"));		btn_grxx_leave.setTextColor(Color.parseColor("#787878"));		btn_grxx_info.setVisibility(View.VISIBLE);		btn_grxx_honor.setVisibility(View.VISIBLE);//		btn_grxx_video.setVisibility(View.VISIBLE);		btn_grxx_curriculum.setVisibility(View.VISIBLE);		btn_grxx_attend.setVisibility(View.VISIBLE);		btn_grxx_msg.setVisibility(View.VISIBLE);		btn_grxx_leave.setVisibility(View.VISIBLE);		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);		if (imm != null) {			imm.hideSoftInputFromWindow(edt_grxx_leave.getWindowToken(), 0);			imm.hideSoftInputFromWindow(edt_grxx_msg.getWindowToken(), 0);		}		isInputMethod = false;	}	// 显示个人考勤界面	private void updataAttendView() {		ly_grxx_nop.setVisibility(View.INVISIBLE);		ly_grxx.setVisibility(View.VISIBLE);		ly_grxx_info.setVisibility(View.INVISIBLE);		ly_grxx_honor.setVisibility(View.INVISIBLE);		ly_grxx_video.setVisibility(View.INVISIBLE);		ly_grxx_curriculum.setVisibility(View.INVISIBLE);		ly_grxx_attend.setVisibility(View.VISIBLE);		ly_grxx_leave.setVisibility(View.INVISIBLE);		ly_grxx_msg.setVisibility(View.INVISIBLE);		btn_grxx_info.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_honor.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_video.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_curriculum.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_attend.setBackgroundResource(R.drawable.cx_btn_grxx_table_click);		btn_grxx_msg.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_leave.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_info.setTextColor(Color.parseColor("#787878"));		btn_grxx_honor.setTextColor(Color.parseColor("#787878"));		btn_grxx_video.setTextColor(Color.parseColor("#787878"));		btn_grxx_curriculum.setTextColor(Color.parseColor("#787878"));		btn_grxx_attend.setTextColor(Color.parseColor("#b36010"));		btn_grxx_msg.setTextColor(Color.parseColor("#787878"));		btn_grxx_leave.setTextColor(Color.parseColor("#787878"));		btn_grxx_info.setVisibility(View.VISIBLE);		btn_grxx_honor.setVisibility(View.VISIBLE);//		btn_grxx_video.setVisibility(View.VISIBLE);		btn_grxx_curriculum.setVisibility(View.VISIBLE);		btn_grxx_attend.setVisibility(View.VISIBLE);		btn_grxx_msg.setVisibility(View.VISIBLE);		btn_grxx_leave.setVisibility(View.VISIBLE);		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);		if (imm != null) {			imm.hideSoftInputFromWindow(edt_grxx_leave.getWindowToken(), 0);			imm.hideSoftInputFromWindow(edt_grxx_msg.getWindowToken(), 0);		}		isInputMethod = false;		year = DateUtils.getYear();		month = DateUtils.getMonth();		calendar = Calendar.getInstance();		application.httpProcess.QryPersonAttend(null, MyApplication.getTime("yyyy-MM"), rybh);		showProgressDialog();	}	// 显示个人留言界面	private void updataMsgView() {		ly_grxx_nop.setVisibility(View.INVISIBLE);		ly_grxx.setVisibility(View.VISIBLE);		ly_grxx_info.setVisibility(View.INVISIBLE);		ly_grxx_honor.setVisibility(View.INVISIBLE);		ly_grxx_video.setVisibility(View.INVISIBLE);		ly_grxx_curriculum.setVisibility(View.INVISIBLE);		ly_grxx_attend.setVisibility(View.INVISIBLE);		ly_grxx_leave.setVisibility(View.INVISIBLE);		ly_grxx_msg.setVisibility(View.VISIBLE);		btn_grxx_info.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_honor.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_video.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_curriculum.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_attend.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_msg.setBackgroundResource(R.drawable.cx_btn_grxx_table_click);		btn_grxx_leave.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_info.setTextColor(Color.parseColor("#787878"));		btn_grxx_honor.setTextColor(Color.parseColor("#787878"));		btn_grxx_video.setTextColor(Color.parseColor("#787878"));		btn_grxx_curriculum.setTextColor(Color.parseColor("#787878"));		btn_grxx_attend.setTextColor(Color.parseColor("#787878"));		btn_grxx_msg.setTextColor(Color.parseColor("#b36010"));		btn_grxx_leave.setTextColor(Color.parseColor("#787878"));		btn_grxx_info.setVisibility(View.VISIBLE);		btn_grxx_honor.setVisibility(View.VISIBLE);//		btn_grxx_video.setVisibility(View.VISIBLE);		btn_grxx_curriculum.setVisibility(View.VISIBLE);		btn_grxx_attend.setVisibility(View.VISIBLE);		btn_grxx_msg.setVisibility(View.VISIBLE);		btn_grxx_leave.setVisibility(View.VISIBLE);		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);		if (imm != null) {			imm.hideSoftInputFromWindow(edt_grxx_leave.getWindowToken(), 0);			imm.hideSoftInputFromWindow(edt_grxx_msg.getWindowToken(), 0);		}		isInputMethod = false;	}	// 显示请假界面	private void updataLeaveView() {		ly_grxx_nop.setVisibility(View.INVISIBLE);		ly_grxx.setVisibility(View.VISIBLE);		ly_grxx_info.setVisibility(View.INVISIBLE);		ly_grxx_honor.setVisibility(View.INVISIBLE);		ly_grxx_video.setVisibility(View.INVISIBLE);		ly_grxx_curriculum.setVisibility(View.INVISIBLE);		ly_grxx_attend.setVisibility(View.INVISIBLE);		ly_grxx_leave.setVisibility(View.VISIBLE);		ly_grxx_msg.setVisibility(View.INVISIBLE);		btn_grxx_info.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_honor.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_video.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_curriculum.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_attend.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_msg.setBackgroundResource(R.drawable.cx_btn_grxx_table);		btn_grxx_leave.setBackgroundResource(R.drawable.cx_btn_grxx_table_click);		btn_grxx_info.setTextColor(Color.parseColor("#787878"));		btn_grxx_honor.setTextColor(Color.parseColor("#787878"));		btn_grxx_video.setTextColor(Color.parseColor("#787878"));		btn_grxx_curriculum.setTextColor(Color.parseColor("#787878"));		btn_grxx_attend.setTextColor(Color.parseColor("#787878"));		btn_grxx_msg.setTextColor(Color.parseColor("#787878"));		btn_grxx_leave.setTextColor(Color.parseColor("#b36010"));		btn_grxx_info.setVisibility(View.VISIBLE);		btn_grxx_honor.setVisibility(View.VISIBLE);//		btn_grxx_video.setVisibility(View.VISIBLE);		btn_grxx_curriculum.setVisibility(View.VISIBLE);		btn_grxx_attend.setVisibility(View.VISIBLE);		btn_grxx_msg.setVisibility(View.VISIBLE);		btn_grxx_leave.setVisibility(View.VISIBLE);		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);		if (imm != null) {			imm.hideSoftInputFromWindow(edt_grxx_leave.getWindowToken(), 0);			imm.hideSoftInputFromWindow(edt_grxx_msg.getWindowToken(), 0);		}		isInputMethod = false;	}	// 更新个人信息	private void updataInfo() {		String xm = "", xb = "", xsxh = "", ssbjmc = "", xszw = "", bzr = "", csny = "", yddh = "", lxrdh = "",				jtdz = "", tc = "", prize = "";		if (studentInfoModel != null) {			if (!TextUtils.isEmpty(studentInfoModel.xm)) {				xm = studentInfoModel.xm;			}			if ("1".equals(studentInfoModel.xb)) {				xb = "男";			} else if ("2".equals(studentInfoModel.xb)) {				xb = "女";			}			if (!TextUtils.isEmpty(studentInfoModel.xsxh)) {				xsxh = studentInfoModel.xsxh;			}			if (!TextUtils.isEmpty(studentInfoModel.ssbjmc)) {				ssbjmc = studentInfoModel.ssbjmc;			}			if (!TextUtils.isEmpty(studentInfoModel.xszw)) {				xszw = studentInfoModel.xszw;			}			if (!TextUtils.isEmpty(studentInfoModel.bzr)) {				bzr = studentInfoModel.bzr;			}			if (!TextUtils.isEmpty(studentInfoModel.csny)) {				csny = studentInfoModel.csny;			}			if (!TextUtils.isEmpty(studentInfoModel.yddh)) {				yddh = studentInfoModel.yddh;			}			if (!TextUtils.isEmpty(studentInfoModel.lxrdh)) {				lxrdh = studentInfoModel.lxrdh;			}			if (!TextUtils.isEmpty(studentInfoModel.jtdz)) {				jtdz = studentInfoModel.jtdz;			}			if (!TextUtils.isEmpty(studentInfoModel.tc)) {				tc = studentInfoModel.tc;			}			PrizeInfoDatabase prizeInfoDatabase = new PrizeInfoDatabase();			List<PrizeInfoModel> list = prizeInfoDatabase.query_by_xsxh(studentInfoModel.xsxh);			if (list != null) {				for (int i = 0; i < 5; i++) {					if (list.size() > i) {						prize = prize + list.get(i).prizeName + "\n";					}				}			}			if (!TextUtils.isEmpty(studentInfoModel.zp)) {				String[] s = studentInfoModel.zp.split("\\.");				String path = MyApplication.PATH_ROOT + MyApplication.PATH_PICTURE + "/student_" + studentInfoModel.id						+ "." + s[s.length - 1];				studentImg(studentInfoModel.zp, path);			}		}		txt_student_1.setText("姓名 : " + xm + "\n性别 : " + xb + "\n学号 : " + xsxh + "\n就读班级 : " + ssbjmc);		txt_student_2.setText("职务 : " + xszw + "\n班主任 : " + bzr + "\n出生日期 : " + csny + "\n联系电话 : " + yddh);		txt_student_3.setText("紧急联系电话 : " + lxrdh + "\n家庭住址 : " + jtdz + "\n特长 : " + tc);		txt_student_4.setText("所获奖项 : \n" + prize);	}	// 更新学生照片	private void studentImg(final String urlStr, final String path) {		if (TextUtils.isEmpty(urlStr)) {			return;		}		final File file = new File(path);		if (file.exists()) {			Message msg = Message.obtain();			msg.what = 1;			msg.obj = path;			handler.sendMessage(msg);			return;		}		application.executoService.execute(new Runnable() {			@Override			public void run() {				if (urlStr.startsWith("ftp")) {					FTPManager ftpManager = new FTPManager();					if (ftpManager.connect(urlStr, path)) {						if (ftpManager.download()) {							Message msg = Message.obtain();							msg.what = 1;							msg.obj = path;							handler.sendMessage(msg);						}						ftpManager.disConnect();					}				} else {					if (application.httpDownLoad(urlStr, path)) {						Message msg = Message.obtain();						msg.what = 1;						msg.obj = path;						handler.sendMessage(msg);					}				}			}		});	}	// 更新荣誉墙	private void updataHonor() {		fragment_i = 0;		fragment_total = 0;		fragments = new ArrayList<Fragment>();		if (prizeInfoModels != null && prizeInfoModels.size() > 0) {			if (prizeInfoModels.size() % 4 == 0) {				fragment_total = prizeInfoModels.size() / 4;			} else {				fragment_total = prizeInfoModels.size() / 4 + 1;			}		}		if (fragment_total > 0) {			for (int i = 0; i < fragment_total; i++) {				GrxxHonorFragment fragment = new GrxxHonorFragment();				fragment.setImageLoader(imageLoader);				if (i == fragment_total - 1) {					fragment.setPrizeInfoModels(prizeInfoModels.subList(4 * i, prizeInfoModels.size()));				} else {					fragment.setPrizeInfoModels(prizeInfoModels.subList(4 * i, 4 * i + 4));				}				fragments.add(fragment);			}			MyViewPagerAdapter adapter = new MyViewPagerAdapter(getSupportFragmentManager(), fragments);			vp_honor.setAdapter(adapter);			btn_honor_left.setVisibility(View.VISIBLE);			btn_honor_right.setVisibility(View.VISIBLE);		} else {			vp_honor.setAdapter(null);			btn_honor_left.setVisibility(View.INVISIBLE);			btn_honor_right.setVisibility(View.INVISIBLE);		}	}	// 更新小视频	private void updataVideo() {		videoFragment_i = 0;		videoFragment_total = 0;		videoFragments = new ArrayList<Fragment>();		if (videoInfoModels != null && videoInfoModels.size() > 0) {			if (videoInfoModels.size() % 10 == 0) {				videoFragment_total = videoInfoModels.size() / 10;			} else {				videoFragment_total = videoInfoModels.size() / 10 + 1;			}		}		if (videoFragment_total > 0) {			for (int i = 0; i < videoFragment_total; i++) {				GrxxVideoFragment fragment = new GrxxVideoFragment();				if (i == videoFragment_total - 1) {					fragment.setOptions(options);					fragment.setImageLoader(loader);					fragment.setVideoInfoModels(videoInfoModels.subList(10 * i, videoInfoModels.size()));				} else {					fragment.setVideoInfoModels(videoInfoModels.subList(10 * i, 10 * i + 10));				}				videoFragments.add(fragment);			}			MyViewPagerAdapter adapter = new MyViewPagerAdapter(getSupportFragmentManager(), videoFragments);			vp_video.setAdapter(adapter);			btn_video_left.setVisibility(View.VISIBLE);			btn_video_right.setVisibility(View.VISIBLE);		} else {			vp_video.setAdapter(null);			btn_video_left.setVisibility(View.INVISIBLE);			btn_video_right.setVisibility(View.INVISIBLE);		}	}	// 更新课程表	private void updataCurriculum() {		ly_curriculum_week.removeAllViews();		LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(1478 / week, 90);		TextView textView1 = new TextView(this);		textView1.setText("星期一");		textView1.setTextSize(33);		textView1.setTextColor(getResources().getColor(R.color.cx_txt_curriculum_1));		textView1.setBackgroundResource(R.drawable.cx_ly_curriculum_1);		textView1.setGravity(Gravity.CENTER);		ly_curriculum_week.addView(textView1, params);		TextView textView2 = new TextView(this);		textView2.setText("星期二");		textView2.setTextSize(33);		textView2.setTextColor(getResources().getColor(R.color.cx_txt_curriculum_2));		textView2.setBackgroundResource(R.drawable.cx_ly_curriculum_2);		textView2.setGravity(Gravity.CENTER);		ly_curriculum_week.addView(textView2, params);		TextView textView3 = new TextView(this);		textView3.setText("星期三");		textView3.setTextSize(33);		textView3.setTextColor(getResources().getColor(R.color.cx_txt_curriculum_3));		textView3.setBackgroundResource(R.drawable.cx_ly_curriculum_3);		textView3.setGravity(Gravity.CENTER);		ly_curriculum_week.addView(textView3, params);		TextView textView4 = new TextView(this);		textView4.setText("星期四");		textView4.setTextSize(33);		textView4.setTextColor(getResources().getColor(R.color.cx_txt_curriculum_4));		textView4.setBackgroundResource(R.drawable.cx_ly_curriculum_4);		textView4.setGravity(Gravity.CENTER);		ly_curriculum_week.addView(textView4, params);		TextView textView5 = new TextView(this);		textView5.setText("星期五");		textView5.setTextSize(33);		textView5.setTextColor(getResources().getColor(R.color.cx_txt_curriculum_5));		textView5.setBackgroundResource(R.drawable.cx_ly_curriculum_5);		textView5.setGravity(Gravity.CENTER);		ly_curriculum_week.addView(textView5, params);		if (week >= 6) {			TextView textView6 = new TextView(this);			textView6.setText("星期六");			textView6.setTextSize(33);			textView6.setTextColor(getResources().getColor(R.color.cx_txt_curriculum_1));			textView6.setBackgroundResource(R.drawable.cx_ly_curriculum_1);			textView6.setGravity(Gravity.CENTER);			ly_curriculum_week.addView(textView6, params);		}		if (week >= 7) {			TextView textView7 = new TextView(this);			textView7.setText("星期日");			textView7.setTextSize(33);			textView7.setTextColor(getResources().getColor(R.color.cx_txt_curriculum_2));			textView7.setBackgroundResource(R.drawable.cx_ly_curriculum_2);			textView7.setGravity(Gravity.CENTER);			ly_curriculum_week.addView(textView7, params);		}		ly_curriculum_ampm.removeAllViews();		if (curriculum_num_am > 0) {			params = new LinearLayout.LayoutParams(110, 640 / curriculum_num * curriculum_num_am);			TextView textViewam = new TextView(this);			textViewam.setText("上午");			textViewam.setTextSize(33);			textViewam.setTextColor(getResources().getColor(R.color.black));			textViewam.setBackgroundResource(R.drawable.cx_ly_curriculum_ampm);			textViewam.setGravity(Gravity.CENTER);			ly_curriculum_ampm.addView(textViewam, params);		}		if (curriculum_num_pm > 0) {			params = new LinearLayout.LayoutParams(110, 640 / curriculum_num * curriculum_num_pm);			TextView textViewpm = new TextView(this);			textViewpm.setText("下午");			textViewpm.setTextSize(33);			textViewpm.setTextColor(getResources().getColor(R.color.black));			textViewpm.setBackgroundResource(R.drawable.cx_ly_curriculum_ampm);			textViewpm.setGravity(Gravity.CENTER);			ly_curriculum_ampm.addView(textViewpm, params);		}		gv_curriculum.setNumColumns(week);		CurriculumAdapter adapter = new CurriculumAdapter(curriculumInfoModels);		gv_curriculum.setAdapter(adapter);	}	// 更新考勤信息	private void updataAttend() {		txt_grxx_attend_table.setText(month + "月考勤表");		txt_grxx_attend1.setText(year + "年" + month + "月考勤(" + studentInfoModel.xm + ")");		if (attendanceModels != null && attendanceModels.size() > 0) {			txt_grxx_attend2.setText("说明 ： 截至今日，" + month + "月正常出勤次数应为 ： " + attendanceModels.size());		} else {			txt_grxx_attend2.setText("说明 ： 暂无当月考勤数据 ");		}		getAttendDate();		attendAdapter = new AttendAdapter(maps);		gv_grxx_attend.setAdapter(attendAdapter);		initBarChart();		setPieData();		sv_grxx_attend_day.scrollTo(0, 0);		ly_grxx_attend_day.removeAllViews();		txt_grxx_attend3.setText("");	}	// 获取考勤日历	private void getAttendDate() {		maps.clear();		calendar.set(year, month - 1, 1);// 设置时间为每月的第一天		// 设置日历格式数组,6行7列		int days[][] = new int[6][7];		Date date[][] = new Date[6][7];		// 设置该月的第一天是周几		int daysOfFirstWeek = calendar.get(Calendar.DAY_OF_WEEK);		// 设置本月有多少天		int daysOfMonth = DateUtils.getDaysOfMonth(year, month);		int dayNum = 1;		boolean isHave6 = true;		for (int i = 0; i < days.length; i++) {			for (int j = 0; j < days[i].length; j++) {				if (i == 0 && j < daysOfFirstWeek - 1) {				} else if (dayNum <= daysOfMonth) {					days[i][j] = dayNum++;				}				Map<String, Object> map = new HashMap<String, Object>();				if (days[i][j] != 0) {					calendar.set(year, month - 1, days[i][j]);					calendar.clear(Calendar.HOUR);					calendar.clear(Calendar.MINUTE);					calendar.clear(Calendar.SECOND);					date[i][j] = calendar.getTime();					map.put("id", days[i][j]);					map.put("date", date[i][j]);					format = new SimpleDateFormat("dd");					map.put("dateText", format.format(date[i][j]));					if (calendar.after(Calendar.getInstance())) {						map.put("dateTextColor", Color.parseColor("#cccccc"));					} else {						map.put("dateTextColor", Color.parseColor("#333333"));					}					getAttendData(map, date[i][j]);				}				if (i == 5 && j == 0 && days[i][j] == 0) {					isHave6 = false;				}				if (i != 5 || isHave6) {					maps.add(map);				}			}		}	}	private void getAttendData(Map<String, Object> map, Date date) {		format = new SimpleDateFormat("yyyy-MM-dd");		map.put("dateString", format.format(date));		if (format.format(date).equals(format.format(date_click))) {			map.put("attendText", "今天");			map.put("attendTextColor", Color.parseColor("#333333"));			return;		}		if (attendanceModels == null) {			return;		}		List<PersonnelAttendanceModel> list = new ArrayList<PersonnelAttendanceModel>();		for (PersonnelAttendanceModel model : attendanceModels) {			if (format.format(date).equals(model.date)) {				list.add(model);			}		}		for (PersonnelAttendanceModel model : list) {			map.put("attendText", "未签到");			map.put("attendTextColor", getResources().getColor(R.color.attend_11));			String[] kqzt = model.status.split(",");			if ("4".equals(kqzt[0])) {				map.put("attendText", "旷课");				map.put("attendTextColor", getResources().getColor(R.color.attend_4));				break;			}			if ("10".equals(kqzt[0])) {				map.put("attendText", "缺席");				map.put("attendTextColor", getResources().getColor(R.color.attend_10));				break;			}			if ("1".equals(kqzt[0])) {				map.put("attendText", "事假");				map.put("attendTextColor", getResources().getColor(R.color.attend_1));				break;			}			if ("2".equals(kqzt[0])) {				map.put("attendText", "病假");				map.put("attendTextColor", getResources().getColor(R.color.attend_2));				break;			}			if ("6".equals(kqzt[0])) {				map.put("attendText", "公假");				map.put("attendTextColor", getResources().getColor(R.color.attend_6));				break;			}			if ("7".equals(kqzt[0])) {				map.put("attendText", "实习");				map.put("attendTextColor", getResources().getColor(R.color.attend_7));				break;			}			if ("8".equals(kqzt[0])) {				map.put("attendText", "集训");				map.put("attendTextColor", getResources().getColor(R.color.attend_8));				break;			}			if ("9".equals(kqzt[0])) {				map.put("attendText", "其它");				map.put("attendTextColor", getResources().getColor(R.color.attend_9));				break;			}			if ("3".equals(kqzt[0])) {				map.put("attendText", "迟到");				map.put("attendTextColor", getResources().getColor(R.color.attend_3));			} else if ("1".equals(application.clockRule_student.xbbdk) && "5".equals(kqzt[1])) {				map.put("attendText", "早退");				map.put("attendTextColor", getResources().getColor(R.color.attend_5));			} else if ("1".equals(application.clockRule_student.xbbdk)) {				if ("0".equals(kqzt[0]) && "0".equals(kqzt[1])) {					map.put("attendText", "全勤");					map.put("attendTextColor", getResources().getColor(R.color.attend_0));				}			} else {				if ("0".equals(kqzt[0])) {					map.put("attendText", "全勤");					map.put("attendTextColor", getResources().getColor(R.color.attend_0));				}			}		}	}	// 更新某天详细考勤信息	private void updataAttendDay(Date date) {		sv_grxx_attend_day.scrollTo(0, 0);		ly_grxx_attend_day.removeAllViews();		format = new SimpleDateFormat("yyyy年MM月dd日");		txt_grxx_attend3.setText(format.format(date) + "详细考勤");		if (attendanceModels == null) {			return;		}		int i = 0;		LinearLayout.LayoutParams params = null;		LayoutInflater inflater = LayoutInflater.from(application);		format = new SimpleDateFormat("yyyy-MM-dd");		for (PersonnelAttendanceModel model : attendanceModels) {			if (format.format(date).equals(model.date)) {				LinearLayout linearLayout = (LinearLayout) inflater.inflate(R.layout.cx_ly_grxx_attend_day, null);				TextView textView1 = (TextView) linearLayout.findViewById(R.id.txt_grxx_attend_day1);				TextView textView2 = (TextView) linearLayout.findViewById(R.id.txt_grxx_attend_day2);				TextView textView3 = (TextView) linearLayout.findViewById(R.id.txt_grxx_attend_day3);				TextView textView4 = (TextView) linearLayout.findViewById(R.id.txt_grxx_attend_day4);				textView1.setText(model.toWorkTime.substring(0, 5));				textView3.setText(model.offWorkTime.substring(0, 5));				String[] kqzt = model.status.split(",");				setTextView(kqzt[0], textView2);				setTextView(kqzt[1], textView4);				if (i % 2 == 0) {					linearLayout.setBackgroundResource(R.drawable.cx_ly_grxx_attend_dayam);				} else {					linearLayout.setBackgroundResource(R.drawable.cx_ly_grxx_attend_daypm);				}				if (i == 0) {					params = new LinearLayout.LayoutParams(338, 163);				} else {					params = new LinearLayout.LayoutParams(338, 163);					params.leftMargin = 30;				}				ly_grxx_attend_day.addView(linearLayout, params);				i++;			}		}	}	private void setTextView(String kqzt, TextView textView) {		if ("0".equals(kqzt)) {			textView.setText("出勤");			textView.setTextColor(getResources().getColor(R.color.attend_0));		} else if ("1".equals(kqzt)) {			textView.setText("事假");			textView.setTextColor(getResources().getColor(R.color.attend_1));		} else if ("2".equals(kqzt)) {			textView.setText("病假");			textView.setTextColor(getResources().getColor(R.color.attend_2));		} else if ("3".equals(kqzt)) {			textView.setText("迟到");			textView.setTextColor(getResources().getColor(R.color.attend_3));		} else if ("4".equals(kqzt)) {			textView.setText("旷课");			textView.setTextColor(getResources().getColor(R.color.attend_4));		} else if ("5".equals(kqzt)) {			textView.setText("早退");			textView.setTextColor(getResources().getColor(R.color.attend_5));		} else if ("6".equals(kqzt)) {			textView.setText("公假");			textView.setTextColor(getResources().getColor(R.color.attend_6));		} else if ("7".equals(kqzt)) {			textView.setText("实习");			textView.setTextColor(getResources().getColor(R.color.attend_7));		} else if ("8".equals(kqzt)) {			textView.setText("集训");			textView.setTextColor(getResources().getColor(R.color.attend_8));		} else if ("9".equals(kqzt)) {			textView.setText("其它");			textView.setTextColor(getResources().getColor(R.color.attend_9));		} else if ("10".equals(kqzt)) {			textView.setText("缺席");			textView.setTextColor(getResources().getColor(R.color.attend_10));		} else if ("11".equals(kqzt)) {			textView.setText("未签到");			textView.setTextColor(getResources().getColor(R.color.attend_11));		}	}	// 初始化图标	private void initBarChart() {		// 背景颜色		barchart.setBackgroundColor(Color.WHITE);		// 设置矩形阴影是否显示		barchart.setDrawBarShadow(false);		// 设置值是否在矩形的上方显示		barchart.setDrawValueAboveBar(true);		// 设置支持触控		barchart.setTouchEnabled(false);		// 设置是否支持拖拽		barchart.setDragEnabled(false);		// 设置能否缩放		barchart.setScaleEnabled(false);		// 设置true支持两个指头向X、Y轴的缩放，如果为false，只能支持X或者Y轴的当方向缩放		barchart.setPinchZoom(false);		// 设置右下角描述		barchart.setDescription("");		// 没用数据时显示		barchart.setNoDataText("");		// 设置是否显示表格颜色,矩形之间的空隙		barchart.setDrawGridBackground(false);		// 设置表格的的颜色，矩形之间的空隙颜色		barchart.setGridBackgroundColor(Color.WHITE);		// 显示边界		barchart.setDrawBorders(false);		// 设置X轴方向上的属性		XAxis xAxis = barchart.getXAxis();		// 设置标签显示在柱形图的上方还是下方		xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);		xAxis.setTypeface(Typeface.DEFAULT);		// 设置是否绘制表格		xAxis.setDrawGridLines(false);		// 设置x标签的间隙		xAxis.setSpaceBetweenLabels(10);		xAxis.setAxisLineWidth(2);		xAxis.setTextSize(20);		// 设置柱形图左边y轴方向上的属性		YAxis leftAxis = barchart.getAxisLeft();		leftAxis.setTypeface(Typeface.DEFAULT);		// 设置是否绘制表格		leftAxis.setDrawGridLines(false);		// 设置是否绘制标签		leftAxis.setDrawLabels(false);		leftAxis.setAxisLineWidth(2);		leftAxis.setAxisMinValue(0f); // this replaces setStartAtZero(true)		// 隐藏右边的坐标轴		barchart.getAxisRight().setEnabled(false);		// 隐藏左边的坐标轴(同上)		// barchart.getAxisLeft().setEnabled(false);		// 隐藏比例块		Legend mLegend = barchart.getLegend();		mLegend.setEnabled(false);	}	// 设置图标数据	private void setPieData() {		if (attendanceModels != null && attendanceModels.size() > 0) {			int c0 = 0, c1 = 0, c2 = 0, c3 = 0, c4 = 0, c5 = 0, c6 = 0, c7 = 0, c8 = 0, c9 = 0, c10 = 0, c11 = 0;			for (PersonnelAttendanceModel model : attendanceModels) {				String[] kqzt = model.status.split(",");				if ("4".equals(kqzt[0])) {					c4++;				} else if ("10".equals(kqzt[0])) {					c10++;				} else if ("1".equals(kqzt[0])) {					c1++;				} else if ("2".equals(kqzt[0])) {					c2++;				} else if ("6".equals(kqzt[0])) {					c6++;				} else if ("7".equals(kqzt[0])) {					c7++;				} else if ("8".equals(kqzt[0])) {					c8++;				} else if ("9".equals(kqzt[0])) {					c9++;				} else if ("3".equals(kqzt[0])) {					c3++;				} else if ("1".equals(application.clockRule_student.xbbdk) && "5".equals(kqzt[1])) {					c5++;				} else if ("1".equals(application.clockRule_student.xbbdk) && "0".equals(kqzt[0])						&& "0".equals(kqzt[1])) {					c0++;				} else if ("0".equals(application.clockRule_student.xbbdk) && "0".equals(kqzt[0])) {					c0++;				} else {					c11++;				}			}			ArrayList<String> xVals = new ArrayList<String>();			ArrayList<BarEntry> yVals1 = new ArrayList<BarEntry>();			ArrayList<Integer> colors = new ArrayList<Integer>();			int i = 0;			if (c0 != 0) {				xVals.add("已签到");				yVals1.add(new BarEntry(c0, i++));				colors.add(getResources().getColor(R.color.attend_0));			}			if (c1 != 0) {				xVals.add("事假");				yVals1.add(new BarEntry(c1, i++));				colors.add(getResources().getColor(R.color.attend_1));			}			if (c2 != 0) {				xVals.add("病假");				yVals1.add(new BarEntry(c2, i++));				colors.add(getResources().getColor(R.color.attend_2));			}			if (c3 != 0) {				xVals.add("迟到");				yVals1.add(new BarEntry(c3, i++));				colors.add(getResources().getColor(R.color.attend_3));			}			if (c4 != 0) {				xVals.add("旷课");				yVals1.add(new BarEntry(c4, i++));				colors.add(getResources().getColor(R.color.attend_4));			}			if (c5 != 0) {				xVals.add("早退");				yVals1.add(new BarEntry(c5, i++));				colors.add(getResources().getColor(R.color.attend_5));			}			if (c6 != 0) {				xVals.add("公假");				yVals1.add(new BarEntry(c6, i++));				colors.add(getResources().getColor(R.color.attend_6));			}			if (c7 != 0) {				xVals.add("实习");				yVals1.add(new BarEntry(c7, i++));				colors.add(getResources().getColor(R.color.attend_7));			}			if (c8 != 0) {				xVals.add("集训");				yVals1.add(new BarEntry(c8, i++));				colors.add(getResources().getColor(R.color.attend_8));			}			if (c9 != 0) {				xVals.add("其它");				yVals1.add(new BarEntry(c9, i++));				colors.add(getResources().getColor(R.color.attend_9));			}			if (c10 != 0) {				xVals.add("缺席");				yVals1.add(new BarEntry(c10, i++));				colors.add(getResources().getColor(R.color.attend_10));			}			if (c11 != 0) {				xVals.add("未签到");				yVals1.add(new BarEntry(c11, i++));				colors.add(getResources().getColor(R.color.attend_11));			}			BarDataSet dataSet = new BarDataSet(yVals1, "");			// 设置矩形之间的间距，参数为百分数，可控制矩形的宽度			dataSet.setBarSpacePercent(20f);			// 设置矩形的颜色			// 格式化 dataset *次			dataSet.setValueFormatter(new ValueFormatter() {				@Override				public String getFormattedValue(float value, Entry entry, int dataSetIndex,												ViewPortHandler viewPortHandler) {					return (int) value + "次";				}			});			dataSet.setColors(colors);			ArrayList<BarDataSet> dataSets = new ArrayList<BarDataSet>();			dataSets.add(dataSet);			// 设置柱形图的数据			BarData data = new BarData(xVals, dataSets);			data.setValueTextSize(20f);			data.setValueTypeface(Typeface.DEFAULT);			barchart.setData(data);			barchart.invalidate();		} else {			barchart.clear();		}	}	// 更新请假信息	private void updataLeave() {		edt_grxx_leave.setText("");		rg_grxx_leave.clearCheck();		if (leaveModels != null && leaveModels.size() > 0) {			leaveAdapter = new LeaveAdapter(leaveModels);			list_leave.setAdapter(leaveAdapter);		} else {			list_leave.setAdapter(null);		}	}	// 更新留言对象	private void updataMsg() {		if (listMsgUser != null && listMsgUser.size() > 0) {			msgUserAdapter = new MsgUserAdapter(listMsgUser);			list_msg_user.setAdapter(msgUserAdapter);			ly_grxx_msg_content.setVisibility(View.INVISIBLE);		} else {			list_msg_user.setAdapter(null);			ly_grxx_msg_content.setVisibility(View.INVISIBLE);		}	}	// 更新留言内容	private void updataMsgContent() {		if (leaveMsgModels != null && leaveMsgModels.size() > 0) {			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");			try {				for (int i = 0; i < leaveMsgModels.size(); i++) {					for (int j = 0; j < leaveMsgModels.size() - 1 - i; j++) {						long a = formatter.parse(leaveMsgModels.get(j).msgDate).getTime();						long b = formatter.parse(leaveMsgModels.get(j + 1).msgDate).getTime();						if (a > b) {							LeaveMsgModel model = leaveMsgModels.get(j);							leaveMsgModels.set(j, leaveMsgModels.get(j + 1));							leaveMsgModels.set(j + 1, model);						}					}				}			} catch (ParseException e) {				e.printStackTrace();			}			msgAdapter = new MsgAdapter(leaveMsgModels);			lv_grxx_msg.setAdapter(msgAdapter);			lv_grxx_msg.setSelection(leaveMsgModels.size());		} else {			lv_grxx_msg.setAdapter(null);		}	}	@Override	public void onClick(View v) {		switch (v.getId()) {			case R.id.btn_cx_back: {				finish();				InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);				if (imm != null)					imm.hideSoftInputFromWindow(edt_grxx_leave.getWindowToken(), 0);				break;			}			case R.id.btn_grxx_info:				updataInfoView();				break;			case R.id.btn_grxx_honor:				updataHonorView();				break;			case R.id.btn_grxx_video:				updataVideoView();				break;			case R.id.btn_grxx_curriculum:				updataCurriculumView();				break;			case R.id.btn_grxx_attend:				updataAttendView();				break;			case R.id.btn_grxx_msg:				updataMsgView();				break;			case R.id.btn_grxx_leave:				updataLeaveView();				break;			case R.id.btn_honor_left:				if (fragment_i > 0) {					fragment_i--;					vp_honor.setCurrentItem(fragment_i);				}				break;			case R.id.btn_honor_right:				if (fragment_i < fragment_total - 1) {					fragment_i++;					vp_honor.setCurrentItem(fragment_i);				}				break;			case R.id.btn_video_left:				if (videoFragment_i > 0) {					videoFragment_i--;					vp_video.setCurrentItem(videoFragment_i);				}				break;			case R.id.btn_video_right:				if (videoFragment_i < videoFragment_total - 1) {					videoFragment_i++;					vp_video.setCurrentItem(videoFragment_i);				}				break;			case R.id.btn_grxx_attend_left:				if (month == 1) {					year--;					month = 12;				} else {					month--;				}				format = new SimpleDateFormat("yyyy-MM");				calendar.set(year, month - 1, 1);				application.httpProcess.QryPersonAttend(null, format.format(calendar.getTime()), rybh);				showProgressDialog();				break;			case R.id.btn_grxx_attend_right:				if (month == 12) {					year++;					month = 1;				} else {					month++;				}				format = new SimpleDateFormat("yyyy-MM");				calendar.set(year, month - 1, 1);				application.httpProcess.QryPersonAttend(null, format.format(calendar.getTime()), rybh);				showProgressDialog();				break;			case R.id.edt_grxx_leave: {				InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);				if (isInputMethod) {					if (imm != null)						imm.hideSoftInputFromWindow(edt_grxx_leave.getWindowToken(), 0);					isInputMethod = false;				} else {					if (imm != null)						imm.showSoftInput(edt_grxx_leave, 0);					isInputMethod = true;				}				break;			}			case R.id.edt_grxx_msg: {				InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);				if (isInputMethod) {					if (imm != null)						imm.hideSoftInputFromWindow(edt_grxx_msg.getWindowToken(), 0);					isInputMethod = false;				} else {					if (imm != null)						imm.showSoftInput(edt_grxx_msg, 0);					isInputMethod = true;				}				break;			}			case R.id.btn_grxx_leave_commit:				LeaveModel leaveModel = new LeaveModel();				int id = rg_grxx_leave.getCheckedRadioButtonId();				if (id == R.id.rb_grxx_leave1) {					leaveModel.leaveType = "2";				} else if (id == R.id.rb_grxx_leave2) {					leaveModel.leaveType = "1";				} else if (id == R.id.rb_grxx_leave3) {					leaveModel.leaveType = "3";				} else {					application.showToast("请选择请假类型");					break;				}				if (leaveModels != null && leaveModels.size() > 0) {					boolean is = false;					for (LeaveModel model : leaveModels) {						if (MyApplication.getTime("yyyy-MM-dd").equals(model.startDate)) {							is = true;							break;						}					}					if (is) {						application.showToast("您今日已提交过请假申请，请勿重复操作");						break;					}				}				String leaveInfo = edt_grxx_leave.getText().toString().trim();				if (TextUtils.isEmpty(leaveInfo)) {					application.showToast("请填写请假事由");					break;				}				leaveModel.leaveInfo = leaveInfo;				leaveModel.leaveRybh = rybh;				leaveModel.leaveStatus = "0";				leaveModel.startDate = MyApplication.getTime("yyyy-MM-dd");				leaveModel.startTime = "00:00:00";				leaveModel.endDate = MyApplication.getTime("yyyy-MM-dd");				leaveModel.endTime = "23:59:59";				leaveModel.creatTime = MyApplication.getTime("yyyy-MM-dd HH:mm:ss");				leaveModel.leaveTimeLength = "8";				showProgressDialog();				application.httpProcess.commitLeave(leaveModel, "ADD");				break;			case R.id.btn_grxx_msg_commit:				String msg = edt_grxx_msg.getText().toString();				if (!TextUtils.isEmpty(msg) && personInfoModel != null) {					leaveMsgModel = new LeaveMsgModel();					leaveMsgModel.kind = "stu";					leaveMsgModel.bjdm = studentInfoModel.ssbj;					leaveMsgModel.formRyType = "stu";					leaveMsgModel.formRybh = studentInfoModel.xsxh;					leaveMsgModel.formRyXm = studentInfoModel.xm;					if ("1".equals(personInfoModel.js)) {						leaveMsgModel.toRyType = "tearch";					} else if ("2".equals(personInfoModel.js)) {						leaveMsgModel.toRyType = "stu";					} else if ("3".equals(personInfoModel.js)) {						leaveMsgModel.toRyType = "patriarch";					}					leaveMsgModel.toRybh = personInfoModel.rybh;					leaveMsgModel.toRyXm = personInfoModel.xm;					leaveMsgModel.msg = msg;					leaveMsgModel.msgDate = MyApplication.getTime("yyyy-MM-dd HH:mm:ss");					showProgressDialog();					application.httpProcess.commitLeaveMsg(leaveMsgModel);				}				break;		}	}	@Override	public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {		if (arg0.getId() == R.id.gv_grxx_attend) {			attendAdapter.setSeclection(arg2);			if (maps.get(arg2).get("id") != null) {				updataAttendDay((Date) maps.get(arg2).get("date"));			}		} else if (arg0.getId() == R.id.list_msg_user) {			if (!listMsgUser.get(arg2).equals(personInfoModel)) {				personInfoModel = listMsgUser.get(arg2);				ly_grxx_msg_content.setVisibility(View.VISIBLE);				if ("3".equals(personInfoModel.js)) {					txt_grxx_msg_name.setText(personInfoModel.xm + "家长");				} else {					txt_grxx_msg_name.setText(personInfoModel.xm);				}				edt_grxx_msg.setText("");				msgUserAdapter.setSeclection(arg2);				leaveMsgModels = null;				showProgressDialog();				handler.removeMessages(2);				if ("3".equals(personInfoModel.js)) {					application.httpProcess.qryLeaveMsg("stu", rybh, "patriarch", personInfoModel.rybh, "", "",							msg_page + "", msg_count + "");				} else {					application.httpProcess.qryLeaveMsg("stu", rybh, "tearch", personInfoModel.rybh, "", "",							msg_page + "", msg_count + "");				}			}		}	}	@Override	public void onFocusChange(View v, boolean hasFocus) {		switch (v.getId()) {			case R.id.edt_grxx_leave:			case R.id.edt_grxx_msg:				isInputMethod = true;				break;		}	}	@Override	public void onLoad() {		if (ly_grxx_leave.getVisibility() == View.VISIBLE) {			if (leaveModels != null && leaveModels.size() > 0 && leave_total > leaveModels.size()) {				list_leave.loadStart();				isUpateLeave = true;				application.httpProcess.qryLeave(rybh, ++leave_page + "", leave_count + "");			}		}	}	private class MyBroadcastReceiver extends BroadcastReceiver {		@Override		public void onReceive(Context context, Intent intent) {			if (!intent.getAction().equals(MyApplication.BROADCAST)) {				return;			}			String tag = intent.getStringExtra(MyApplication.BROADCAST_TAG);			if (tag.equals("permission_finish")) {				finish();			} else if (tag.equals("QRY_PERSON_GRXX") && !application.isUpdateEQ && !application.isGrxx) {				//读取到数据				String mCardNum = intent.getStringExtra("mCardNum");				tv_test.setText(mCardNum);				card = mCardNum;				showProgressDialog();				application.httpProcess.QryPerson(application.equInfoModel.jssysdm, mCardNum);			} else if (tag.equals(HttpProcess.QRY_PERSON) && "QRY_PERSON_GRXX".equals(application.cardType)					&& !application.isUpdateEQ && application.isGrxx) {				boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);				String msg = intent.getStringExtra(MyApplication.CMD_MSG);				if (result) {					Log.d(TAG, tag + " " + msg);					rybh = intent.getStringExtra("rybh");					if ("1".equals(intent.getStringExtra("js"))) {//						application.showToast("查询教师个人信息功能暂未开通,敬请期待");						view.setVisibility(View.VISIBLE);						TeacherInfoDatabase database = new TeacherInfoDatabase();						TeacherInfoModel model = database.query_by_id(rybh);						if (!TextUtils.isEmpty(model.zp)) {							String[] s = model.zp.split("\\.");							String path = MyApplication.PATH_ROOT + MyApplication.PATH_PICTURE + "/teacher_"									+ model.rybh + "." + s[s.length - 1];							imageLoader.getBitmapFormUrl(path, new OnImageLoaderListener() {								@Override								public void onImageLoader(Bitmap bitmap, String url) {									if (bitmap != null) {										img_teacher_touxiang.setImageBitmap(bitmap);									}								}							}, 180, 180);						}						String xm = "", byzy = "", zc = "", byxx = "", zgxlmc = "", jl = "", jxqk = "";						if (!TextUtils.isEmpty(model.xm)) {							xm = model.xm;						}						if (!TextUtils.isEmpty(model.byzy)) {							byzy = model.byzy;						}						if (!TextUtils.isEmpty(model.jgzc)) {							zc = model.jgzc;						}						if (!TextUtils.isEmpty(model.byxx)) {							byxx = model.byxx;						}						if (!TextUtils.isEmpty(model.zgxlmc)) {							zgxlmc = model.zgxlmc;						}						if (!TextUtils.isEmpty(model.jgjl)) {							jl = model.jgjl;						}						txt_teacher_1.setText("教师姓名 : " + xm + "\n所学专业 : " + byzy + "\n职称 : " + zc);						txt_teacher_2.setText("毕业院校 : " + byxx + "\n学历学位 : " + zgxlmc + "\n教师教龄 : " + jl);						if (!TextUtils.isEmpty(model.jxqk)) {							WebSettings webSettings = webView.getSettings();							webSettings.setDefaultFontSize(30);							webView.loadDataWithBaseURL(null, model.jxqk, "text/html", "utf-8", null);						}						updataNoView();						closeProgressDialog();						return;					}					if (TextUtils.isEmpty(rybh)) {						application.showToast("未找到该人员");						updataNoView();						closeProgressDialog();					} else {						application.httpProcess.QryStudent("", rybh, "", false);					}				} else {					Log.e(TAG, tag + " " + msg);					application.showToast("查询人员失败，原因 : " + msg);					updataNoView();					closeProgressDialog();				}			} else if (tag.equals(HttpProcess.QRY_STUDENT) && "QRY_PERSON_GRXX".equals(application.cardType)					&& !application.isUpdateEQ && application.isGrxx) {				// boolean result = intent.getBooleanExtra(				// MyApplication.CMD_RESULT, false);				// String msg = intent.getStringExtra(MyApplication.CMD_MSG);				// if (result) {				view.setVisibility(View.INVISIBLE);				List<StudentInfoModel> list = JSONArray.parseArray(intent.getStringExtra("studentList"),						StudentInfoModel.class);				if (list != null && list.size() > 0) {					studentInfoModel = list.get(0);				}				if (studentInfoModel == null) {					application.showToast("未找到该人员");					updataNoView();					closeProgressDialog();				} else {					updataInfo();					if (from == 1) {						updataInfoView();					}					format = new SimpleDateFormat("yyyy-MM-dd");					application.httpProcess.QryCurriculum_week("", format.format(date_1) + " 00:00:00",							format.format(date_7) + " 23:59:59", rybh);				}				// } else {				// Log.e(TAG, tag + " " + msg);				// application.showToast("查询人员失败，原因 : " + msg);				// updataNoView();				// closeProgressDialog();				// }			} else if (tag.equals(HttpProcess.QRY_PERSONATTEND) && application.isSynComplete					&& !application.getRunningActivityName().equals("com.yy.doorplate.activity.EmptyActivity")					&& "QRY_PERSON_GRXX".equals(application.cardType) && !application.isUpdateEQ && application.isGrxx					&& !application.isUpdateEQ) {				attendanceModels = null;				String personnelAttendanceList = intent.getStringExtra("personnelAttendanceList");				if (!TextUtils.isEmpty(personnelAttendanceList)) {					try {						attendanceModels = JSONArray.parseArray(personnelAttendanceList,								PersonnelAttendanceModel.class);					} catch (Exception e) {						e.printStackTrace();					}				}				updataAttend();				closeProgressDialog();				boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);				String msg = intent.getStringExtra(MyApplication.CMD_MSG);				if (!result) {					application.showToast("查询个人考勤失败，原因 : " + msg);				}			} else if (tag.equals(HttpProcess.QRY_CURRICULUM + "week") && "QRY_PERSON_GRXX".equals(application.cardType)					&& !application.isUpdateEQ && application.isGrxx) {				getCurriculum(intent.getStringExtra("curriculumInfoList"));				updataCurriculum();				application.httpProcess.QryLeaveUser(card, "", msguser_page + "", msguser_count + "");				boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);				String msg = intent.getStringExtra(MyApplication.CMD_MSG);				if (!result) {					application.showToast("查询个人课表失败，原因 : " + msg);				}			} else if (tag.equals(HttpProcess.QRY_LEAVE_USER) && application.isSynComplete					&& "QRY_PERSON_GRXX".equals(application.cardType) && !application.isUpdateEQ					&& application.isGrxx) {				String personInfoList = intent.getStringExtra("personInfoList");				if (!TextUtils.isEmpty(personInfoList)) {					listMsgUser = JSONArray.parseArray(personInfoList, PersonInfoModel.class);				}				// PersonInfoModel model = new PersonInfoModel();				// model.xm = "家长";				// model.js = "3";				// if (listMsgUser == null) {				// listMsgUser = new ArrayList<PersonInfoModel>();				// listMsgUser.add(model);				// } else {				// listMsgUser.add(0, model);				// }				updataMsg();				if (from == 4) {					updataMsgView();				}				application.httpProcess.qryLeave(rybh, leave_page + "", leave_count + "");				boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);				String msg = intent.getStringExtra(MyApplication.CMD_MSG);				if (!result) {					application.showToast("查询个人留言失败，原因 : " + msg);				}			} else if (tag.equals(HttpProcess.QRY_LEAVE) && application.isSynComplete					&& "QRY_PERSON_GRXX".equals(application.cardType) && !application.isUpdateEQ					&& application.isGrxx) {				String leaveInfoList = intent.getStringExtra("leaveInfoList");				try {					leave_page = Integer.parseInt(intent.getStringExtra("page"));					leave_total = Integer.parseInt(intent.getStringExtra("total"));				} catch (NumberFormatException e) {					e.printStackTrace();				}				if (!TextUtils.isEmpty(leaveInfoList)) {					leaveModels = JSONArray.parseArray(leaveInfoList, LeaveModel.class);				}				updataLeave();				if (from == 5) {					updataLeaveView();				}				if (isUpateLeave) {					isUpateLeave = false;					list_leave.loadComplete();					closeProgressDialog();				} else {					application.httpProcess.QryPrize("", rybh, null, false);				}				boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);				String msg = intent.getStringExtra(MyApplication.CMD_MSG);				if (!result) {					application.showToast("查询个人请假信息失败，原因 : " + msg);				}			} else if (tag.equals(HttpProcess.QRY_PRIZE) && application.isSynComplete					&& "QRY_PERSON_GRXX".equals(application.cardType) && !application.isUpdateEQ					&& application.isGrxx) {				prizeInfoModels = prizeInfoDatabase.query_by_xsxh(rybh);				updataHonor();				application.httpProcess.qryVideo(null, "", "rybh", "", rybh);				boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);				String msg = intent.getStringExtra(MyApplication.CMD_MSG);				if (!result) {					application.showToast("查询个人荣誉失败，原因 : " + msg);				}			} else if (tag.equals(HttpProcess.QRY_VIDEO) && application.isSynComplete					&& "QRY_PERSON_GRXX".equals(application.cardType) && !application.isUpdateEQ					&& application.isGrxx) {				videoInfoModels = videoDatabase.query("relaObjType = ? and relaObjValue = ?",						new String[] { "rybh", rybh });				vedioInfoModels_i = 0;				if (videoInfoModels != null && videoInfoModels.size() > 0) {					handler.sendEmptyMessage(0);				} else {					updataVideo();				}				closeProgressDialog();				boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);				String msg = intent.getStringExtra(MyApplication.CMD_MSG);				if (!result) {					application.showToast("查询个人风采失败，原因 : " + msg);				}			} else if (tag.equals(HttpProcess.COMMIT_LEAVE)) {				boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);				String msg = intent.getStringExtra(MyApplication.CMD_MSG);				if (result) {					application.showToast("请假申请提交成功");					isUpateLeave = true;					application.httpProcess.qryLeave(rybh, leave_page + "", leave_count + "");				} else {					application.showToast("请假申请提交失败，原因 : " + msg);				}				// closeProgressDialog();			} else if (tag.equals(HttpProcess.QRY_LEAVE_MSG)) {				boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);				String msg = intent.getStringExtra(MyApplication.CMD_MSG);				if (result) {					String leaveMsmList = intent.getStringExtra("leaveMsmList");					if (!TextUtils.isEmpty(leaveMsmList)) {						leaveMsgModels = JSONArray.parseArray(leaveMsmList, LeaveMsgModel.class);					}					updataMsgContent();					closeProgressDialog();				} else {					application.showToast("查询留言失败，原因 : " + msg);					updataMsgContent();					closeProgressDialog();				}				handler.removeMessages(2);				handler.sendEmptyMessageDelayed(2, 10 * 1000);			} else if (tag.equals(HttpProcess.COMMIT_LEAVE_MSG)) {				boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);				String msg = intent.getStringExtra(MyApplication.CMD_MSG);				if (result && leaveMsgModel != null) {					if (leaveMsgModels == null) {						leaveMsgModels = new ArrayList<LeaveMsgModel>();					}					leaveMsgModels.add(leaveMsgModel);					updataMsgContent();					edt_grxx_msg.setText("");				} else {					application.showToast("发送留言失败，原因 : " + msg);				}				closeProgressDialog();				leaveMsgModel = null;			} else if (tag.equals("video_show")) {				Intent i = new Intent(CXGrxxActivity.this, VideoPlayActivity.class);				i.putExtra("path", intent.getStringExtra("path"));				startActivity(i);			}		}	}	private Handler handler = new Handler() {		public void handleMessage(Message msg) {			switch (msg.what) {				case 0:					if (videoInfoModels.size() > vedioInfoModels_i) {						String[] s = videoInfoModels.get(vedioInfoModels_i).resPath.split("/");						String path = MyApplication.PATH_ROOT + MyApplication.PATH_VIDEO + "/" + s[s.length - 1];						downLoadVideo(videoInfoModels.get(vedioInfoModels_i).resPath, path);					} else {						videoInfoModels = videoDatabase.query("relaObjType = ? and relaObjValue = ?",								new String[] { "rybh", rybh });						vedioInfoModels_i = 0;						updataVideo();					}					break;				case 1:					imageLoader.getBitmapFormUrl(msg.obj.toString(), new OnImageLoaderListener() {						@Override						public void onImageLoader(Bitmap bitmap, String url) {							if (bitmap != null) {								img_student_touxiang.setImageBitmap(bitmap);							}						}					}, 321, 310);					break;				case 2: {					leaveMsgModels = null;					if (personInfoModel != null) {						if ("3".equals(personInfoModel.js)) {							application.httpProcess.qryLeaveMsg("stu", rybh, "patriarch", personInfoModel.rybh, "", "",									msg_page + "", msg_count + "");						} else {							application.httpProcess.qryLeaveMsg("stu", rybh, "tearch", personInfoModel.rybh, "", "",									msg_page + "", msg_count + "");						}					}					break;				}			}		};	};	private View view;	private ImageView img_teacher_touxiang;	private TextView txt_teacher_1;	private TextView txt_teacher_2;	private WebView webView;	private void downLoadVideo(final String urlStr, final String path) {		if (TextUtils.isEmpty(urlStr)) {			downLoadVideoError();			return;		}		final File file = new File(path);		if (file.exists()) {			downLoadVideoFinish();			return;		}		application.executoService.execute(new Runnable() {			@Override			public void run() {				FTPManager ftpManager = new FTPManager();				if (ftpManager.connect(urlStr, path)) {					if (ftpManager.download()) {						ftpManager.disConnect();						downLoadVideoFinish();					} else {						downLoadVideoError();					}				} else {					downLoadVideoError();				}			}		});	}	private void downLoadVideoError() {		videoDatabase.delete_by_id(videoInfoModels.get(vedioInfoModels_i).id);		vedioInfoModels_i++;		handler.sendEmptyMessage(0);	}	private void downLoadVideoFinish() {		vedioInfoModels_i++;		handler.sendEmptyMessage(0);	}	private void getWeek(long currentTimeMillis) throws ParseException {		date_click = new Date(currentTimeMillis);		calendar.setTime(date_click);		if (calendar.get(Calendar.DAY_OF_WEEK) == 2) {			date_1 = date_click;			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 1);			date_2 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 2);			date_3 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 3);			date_4 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 4);			date_5 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 5);			date_6 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 6);			date_7 = calendar.getTime();		} else if (calendar.get(Calendar.DAY_OF_WEEK) == 3) {			date_2 = date_click;			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -1);			date_1 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 1);			date_3 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 2);			date_4 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 3);			date_5 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 4);			date_6 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 5);			date_7 = calendar.getTime();		} else if (calendar.get(Calendar.DAY_OF_WEEK) == 4) {			date_3 = date_click;			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -2);			date_1 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -1);			date_2 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 1);			date_4 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 2);			date_5 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 3);			date_6 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 4);			date_7 = calendar.getTime();		} else if (calendar.get(Calendar.DAY_OF_WEEK) == 5) {			date_4 = date_click;			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -3);			date_1 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -2);			date_2 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -1);			date_3 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 1);			date_5 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 2);			date_6 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 3);			date_7 = calendar.getTime();		} else if (calendar.get(Calendar.DAY_OF_WEEK) == 6) {			date_5 = date_click;			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -4);			date_1 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -3);			date_2 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -2);			date_3 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -1);			date_4 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 1);			date_6 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 2);			date_7 = calendar.getTime();		} else if (calendar.get(Calendar.DAY_OF_WEEK) == 7) {			date_6 = date_click;			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -5);			date_1 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -4);			date_2 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -3);			date_3 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -2);			date_4 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -1);			date_5 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, 1);			date_7 = calendar.getTime();		} else if (calendar.get(Calendar.DAY_OF_WEEK) == 1) {			date_7 = date_click;			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -6);			date_1 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -5);			date_2 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -4);			date_3 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -3);			date_4 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -2);			date_5 = calendar.getTime();			calendar.setTime(date_click);			calendar.add(Calendar.DAY_OF_MONTH, -1);			date_6 = calendar.getTime();		}	}	private void getCurriculum(String curriculumInfoList) {		curriculumInfoModels.clear();		format = new SimpleDateFormat("yyyy-MM-dd");		List<CurriculumInfoModel> curriculums = null;		if (!TextUtils.isEmpty(curriculumInfoList)) {			try {				curriculums = JSONArray.parseArray(curriculumInfoList, CurriculumInfoModel.class);			} catch (Exception e) {				e.printStackTrace();			}		}		week = 5;		if (curriculums != null && curriculums.size() > 0) {			for (CurriculumInfoModel model : curriculums) {				if (format.format(date_7).equals(model.skrq)) {					week += 2;					break;				}			}			if (week == 5) {				for (CurriculumInfoModel model : curriculums) {					if (format.format(date_6).equals(model.skrq)) {						week++;						break;					}				}			}		}		curriculum_num_am = 0;		curriculum_num_pm = 0;		SectionInfoDatabase sectionInfoDatabase = new SectionInfoDatabase();		sectionModels = null;		List<SectionInfoModel> sectionInfoModels = sectionInfoDatabase.query_all();		if (sectionInfoModels != null && sectionInfoModels.size() > 0) {			sectionModels = new ArrayList<SectionInfoModel>();			long noon = 14400000, night = 36000000;			for (SectionInfoModel model : sectionInfoModels) {				if (Long.parseLong(model.jcskkssj) <= noon) {					sectionModels.add(model);					curriculum_num_am++;				} else if (noon < Long.parseLong(model.jcskkssj) && Long.parseLong(model.jcskkssj) <= night) {					sectionModels.add(model);					curriculum_num_pm++;				}			}		}		curriculum_num = curriculum_num_am + curriculum_num_pm;		curriculumInfoModels.clear();		for (int i = 0; i < curriculum_num; i++) {			for (int j = 1; j <= week; j++) {				int a = j + 1;				if (j == 7) {					a = 1;				}				CurriculumInfoModel curriculumInfoModel = new CurriculumInfoModel();				if (sectionModels != null && sectionModels.size() > i && curriculums != null						&& curriculums.size() > 0) {					for (CurriculumInfoModel model : curriculums) {						try {							calendar.setTime(format.parse(model.skrq));							String[] jcs = model.jc.split("-");							for (String jc : jcs) {								if (sectionModels.get(i).jcdm.equals(jc) && calendar.get(Calendar.DAY_OF_WEEK) == a) {									curriculumInfoModel = model;									break;								}							}							if (!TextUtils.isEmpty(curriculumInfoModel.id)) {								break;							}						} catch (ParseException e) {							e.printStackTrace();						}					}				}				if (TextUtils.isEmpty(curriculumInfoModel.skrq)) {					calendar.setTime(date_click);					if (calendar.get(Calendar.DAY_OF_WEEK) == a) {						curriculumInfoModel.skrq = MyApplication.getTime("yyyy-MM-dd");					}				}				curriculumInfoModels.add(curriculumInfoModel);			}		}	}	private void showProgressDialog() {		application.isGrxx = true;		if (progressDialog == null) {			progressDialog = ProgressDialog.show(this, null, "加载中", false, false);		}	}	private void closeProgressDialog() {		if (progressDialog != null && progressDialog.isShowing()) {			progressDialog.dismiss();			progressDialog = null;		}		application.isGrxx = false;	}	private class CurriculumAdapter extends BaseAdapter {		private List<CurriculumInfoModel> curriculumInfoModels;		public CurriculumAdapter(List<CurriculumInfoModel> curriculumInfoModels) {			this.curriculumInfoModels = curriculumInfoModels;		}		@Override		public int getCount() {			return curriculumInfoModels.size();		}		@Override		public Object getItem(int position) {			return curriculumInfoModels.get(position);		}		@Override		public long getItemId(int position) {			return position;		}		private class ViewHolder {			private RelativeLayout ly_item_curriculm;			private CustomTextView txt_item_curriculm;		}		@Override		public View getView(int position, View view, ViewGroup parent) {			CurriculumInfoModel model = curriculumInfoModels.get(position);			ViewHolder viewHolder = null;			if (viewHolder == null) {				viewHolder = new ViewHolder();				view = LayoutInflater.from(application).inflate(R.layout.cx_item_curriculm, null);				viewHolder.txt_item_curriculm = (CustomTextView) view.findViewById(R.id.txt_item_curriculm);				viewHolder.ly_item_curriculm = (RelativeLayout) view.findViewById(R.id.ly_item_curriculm);				view.setTag(viewHolder);			} else {				viewHolder = (ViewHolder) view.getTag();			}			view.setLayoutParams(new GridView.LayoutParams(1478 / week, 640 / curriculum_num));			if (MyApplication.getTime("yyyy-MM-dd").equals(model.skrq)) {				viewHolder.ly_item_curriculm.setBackgroundResource(R.drawable.cx_ly_curriculum_red);			} else {				viewHolder.ly_item_curriculm.setBackgroundResource(R.drawable.cx_ly_curriculum_white);			}			if (!TextUtils.isEmpty(model.id)) {				viewHolder.txt_item_curriculm.setText(model.kcmc);				if (application.curriculumInfoModel_now != null						&& application.curriculumInfoModel_now.id.equals(model.id)) {					viewHolder.txt_item_curriculm.setTextColor(getResources().getColor(R.color.cx_txt_curriculum_red));				} else {					try {						int i = 0;						if ((position + 1) % week == 0) {							i = (position + 1) / week - 1;						} else {							i = (position + 1) / week;						}						format = new SimpleDateFormat("HH:mm:ss");						String timeStr = format.format(new Date(Long.parseLong(sectionModels.get(i).jcskkssj)));						format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");						long time = format.parse(model.skrq + " " + timeStr).getTime();						if (time < System.currentTimeMillis()) {							viewHolder.txt_item_curriculm									.setTextColor(getResources().getColor(R.color.cx_txt_curriculum_gray));						}					} catch (Exception e) {						e.printStackTrace();					}				}			}			return view;		}	}	private class AttendAdapter extends BaseAdapter {		private List<Map<String, Object>> maps;		public AttendAdapter(List<Map<String, Object>> maps) {			this.maps = maps;		}		@Override		public int getCount() {			return maps.size();		}		@Override		public Object getItem(int position) {			return maps.get(position);		}		@Override		public long getItemId(int position) {			return position;		}		private class ViewHolder {			private RelativeLayout ly_item_attend;			private TextView txt_item_grxx_date, txt_item_grxx_attend;		}		@Override		public View getView(int position, View view, ViewGroup parent) {			ViewHolder viewHolder = null;			if (viewHolder == null) {				viewHolder = new ViewHolder();				view = LayoutInflater.from(application).inflate(R.layout.cx_item_grxx_attend, null);				viewHolder.ly_item_attend = (RelativeLayout) view.findViewById(R.id.ly_item_attend);				viewHolder.txt_item_grxx_date = (TextView) view.findViewById(R.id.txt_item_grxx_date);				viewHolder.txt_item_grxx_attend = (TextView) view.findViewById(R.id.txt_item_grxx_attend);				view.setTag(viewHolder);			} else {				viewHolder = (ViewHolder) view.getTag();			}			if (maps.get(position).get("id") != null) {				viewHolder.ly_item_attend.setBackgroundColor(Color.WHITE);				viewHolder.txt_item_grxx_date.setText(maps.get(position).get("dateText").toString());				viewHolder.txt_item_grxx_date.setTextColor((Integer) maps.get(position).get("dateTextColor"));				if (maps.get(position).get("attendText") != null) {					viewHolder.txt_item_grxx_attend.setText(maps.get(position).get("attendText").toString());					viewHolder.txt_item_grxx_attend.setTextColor((Integer) maps.get(position).get("attendTextColor"));				}			}			return view;		}		public void setSeclection(int position) {			for (int i = 0; i < maps.size(); i++) {				View view = gv_grxx_attend.getChildAt(i);				if (view == null) {					continue;				}				ViewHolder viewHolder = (ViewHolder) view.getTag();				if (i == position) {					if (maps.get(i).get("id") != null) {						viewHolder.ly_item_attend.setBackgroundColor(Color.parseColor("#fbae28"));						viewHolder.txt_item_grxx_date.setTextColor(Color.WHITE);						if (maps.get(i).get("attendText") != null) {							viewHolder.txt_item_grxx_attend.setTextColor(Color.WHITE);						}					}				} else {					viewHolder.ly_item_attend.setBackgroundColor(Color.WHITE);					if (maps.get(i).get("id") != null) {						viewHolder.txt_item_grxx_date.setTextColor((Integer) maps.get(i).get("dateTextColor"));						if (maps.get(i).get("attendText") != null) {							viewHolder.txt_item_grxx_attend.setTextColor((Integer) maps.get(i).get("attendTextColor"));						}					}				}			}		}	}	private class LeaveAdapter extends BaseAdapter {		private List<LeaveModel> leaveModels;		public LeaveAdapter(List<LeaveModel> leaveModels) {			this.leaveModels = leaveModels;		}		@Override		public int getCount() {			return leaveModels.size();		}		@Override		public Object getItem(int position) {			return leaveModels.get(position);		}		@Override		public long getItemId(int position) {			return position;		}		private class ViewHolder {			TextView txt_item_leave_type, txt_item_leave_time, txt_item_leave_duration, txt_item_leave_teacher,					txt_item_leave_state;		}		@Override		public View getView(int position, View convertView, ViewGroup parent) {			ViewHolder viewHolder = null;			if (convertView == null) {				viewHolder = new ViewHolder();				convertView = LayoutInflater.from(application).inflate(R.layout.cx_item_leave, null);				convertView.setLayoutParams(new ListView.LayoutParams(768, 295));				viewHolder.txt_item_leave_type = (TextView) convertView.findViewById(R.id.txt_item_leave_type);				viewHolder.txt_item_leave_time = (TextView) convertView.findViewById(R.id.txt_item_leave_time);				viewHolder.txt_item_leave_duration = (TextView) convertView.findViewById(R.id.txt_item_leave_duration);				viewHolder.txt_item_leave_teacher = (TextView) convertView.findViewById(R.id.txt_item_leave_teacher);				viewHolder.txt_item_leave_state = (TextView) convertView.findViewById(R.id.txt_item_leave_state);				convertView.setTag(viewHolder);			} else {				viewHolder = (ViewHolder) convertView.getTag();			}			if ("2".equals(leaveModels.get(position).leaveType)) {				viewHolder.txt_item_leave_type.setText("病假");			} else if ("1".equals(leaveModels.get(position).leaveType)) {				viewHolder.txt_item_leave_type.setText("事假");			} else {				viewHolder.txt_item_leave_type.setText("其他");			}			viewHolder.txt_item_leave_time.setText(leaveModels.get(position).creatTime);			viewHolder.txt_item_leave_teacher.setText(leaveModels.get(position).dealName);			if ("0".equals(leaveModels.get(position).leaveStatus)) {				viewHolder.txt_item_leave_state.setText("待审核");				viewHolder.txt_item_leave_state.setTextColor(getResources().getColor(R.color.black));			} else if ("1".equals(leaveModels.get(position).leaveStatus)) {				viewHolder.txt_item_leave_state.setText("审核通过");				viewHolder.txt_item_leave_state.setTextColor(Color.GREEN);			} else if ("2".equals(leaveModels.get(position).leaveStatus)) {				viewHolder.txt_item_leave_state.setText("审核拒绝");				viewHolder.txt_item_leave_state.setTextColor(Color.RED);			}			if (!TextUtils.isEmpty(leaveModels.get(position).leaveTimeLength)) {				viewHolder.txt_item_leave_duration.setText(leaveModels.get(position).leaveTimeLength + "小时");			}			return convertView;		}	}	private class MsgUserAdapter extends BaseAdapter {		private List<PersonInfoModel> listMsgUser;		public MsgUserAdapter(List<PersonInfoModel> listMsgUser) {			this.listMsgUser = listMsgUser;		}		@Override		public int getCount() {			return listMsgUser.size();		}		@Override		public Object getItem(int position) {			return listMsgUser.get(position);		}		@Override		public long getItemId(int position) {			return position;		}		private class ViewHolder {			View view_line;			TextView txt_item_msguser_name;		}		@Override		public View getView(int position, View convertView, ViewGroup parent) {			ViewHolder viewHolder = null;			if (convertView == null) {				viewHolder = new ViewHolder();				convertView = LayoutInflater.from(application).inflate(R.layout.cx_item_msguser, null);				viewHolder.view_line = convertView.findViewById(R.id.view_line);				viewHolder.txt_item_msguser_name = (TextView) convertView.findViewById(R.id.txt_item_msguser_name);				convertView.setTag(viewHolder);			} else {				viewHolder = (ViewHolder) convertView.getTag();			}			if (position == 0) {				viewHolder.view_line.setVisibility(View.VISIBLE);			}			if ("3".equals(listMsgUser.get(position).js)) {				viewHolder.txt_item_msguser_name.setText(listMsgUser.get(position).xm + "家长");			} else {				viewHolder.txt_item_msguser_name.setText(listMsgUser.get(position).xm);			}			return convertView;		}		public void setSeclection(int position) {			for (int i = 0; i < listMsgUser.size(); i++) {				View view = list_msg_user.getChildAt(i);				if (view == null) {					continue;				}				if (i == position) {					view.setBackgroundColor(Color.parseColor("#F4F4F4"));				} else {					view.setBackground(null);				}			}		}	}	private class MsgAdapter extends BaseAdapter {		private List<LeaveMsgModel> leaveMsgModels;		public MsgAdapter(List<LeaveMsgModel> leaveMsgModels) {			this.leaveMsgModels = leaveMsgModels;		}		@Override		public int getCount() {			return leaveMsgModels.size();		}		@Override		public Object getItem(int position) {			return leaveMsgModels.get(position);		}		@Override		public long getItemId(int position) {			return position;		}		private class ViewHolder {			TextView txt_item_grxx_msg_left, txt_item_grxx_msg_right, txt_item_grxx_msg_time;		}		@Override		public View getView(int position, View convertView, ViewGroup parent) {			ViewHolder viewHolder = new ViewHolder();			LeaveMsgModel leaveMsgModel = leaveMsgModels.get(position);			viewHolder = new ViewHolder();			// Log.e(TAG, leaveMsgModel.toString());			if ("stu".equals(leaveMsgModel.formRyType)) {				convertView = LayoutInflater.from(application).inflate(R.layout.cx_item_grxx_msg_right, null);				viewHolder.txt_item_grxx_msg_right = (TextView) convertView.findViewById(R.id.txt_item_grxx_msg_right);				viewHolder.txt_item_grxx_msg_time = (TextView) convertView.findViewById(R.id.txt_item_grxx_msg_time);				viewHolder.txt_item_grxx_msg_right.setText(leaveMsgModel.msg);				try {					if (System.currentTimeMillis() - format.parse(leaveMsgModel.msgDate).getTime() > 5 * 60 * 1000) {						viewHolder.txt_item_grxx_msg_time.setText(leaveMsgModel.msgDate);					} else {						viewHolder.txt_item_grxx_msg_time.setText("");					}				} catch (ParseException e) {					e.printStackTrace();				}			} else {				convertView = LayoutInflater.from(application).inflate(R.layout.cx_item_grxx_msg_left, null);				viewHolder.txt_item_grxx_msg_left = (TextView) convertView.findViewById(R.id.txt_item_grxx_msg_left);				viewHolder.txt_item_grxx_msg_time = (TextView) convertView.findViewById(R.id.txt_item_grxx_msg_time);				viewHolder.txt_item_grxx_msg_left.setText(leaveMsgModel.msg);				try {					if (System.currentTimeMillis() - format.parse(leaveMsgModel.msgDate).getTime() > 5 * 60 * 1000) {						viewHolder.txt_item_grxx_msg_time.setText(leaveMsgModel.msgDate);					} else {						viewHolder.txt_item_grxx_msg_time.setText("");					}				} catch (ParseException e) {					e.printStackTrace();				}			}			// 最后一行增加高度			// if (position == leaveMsgModels.size() - 1) {			// ListView.LayoutParams params = new ListView.LayoutParams(			// convertView.getWidth(), convertView.getHeight() + 40);			// convertView.setLayoutParams(params);			// }			return convertView;		}	}	@Override	protected void onStart() {		super.onStart();		application.handler_touch.removeMessages(0);		application.handler_touch.sendEmptyMessageDelayed(0, application.screensaver_time * 1000);	}	@Override	protected void onDestroy() {		super.onDestroy();		broadcastManager.unregisterReceiver(myBroadcastReceiver);		imageLoader.clearCache();		imageLoader.cancelTask();		application.cardType = null;		handler.removeMessages(2);	}	@Override	public boolean dispatchKeyEvent(KeyEvent event) {		switch (event.getAction()) {			case KeyEvent.ACTION_DOWN:				application.handler_touch.removeMessages(0);				break;			case KeyEvent.ACTION_UP:				application.handler_touch.sendEmptyMessageDelayed(0, application.screensaver_time * 1000);				break;		}		return super.dispatchKeyEvent(event);	}	@Override	public boolean dispatchTouchEvent(MotionEvent ev) {		if (ev.getAction() == MotionEvent.ACTION_DOWN) {			View view = getCurrentFocus();			if (isShouldHideSoftKeyBoard(view, ev)) {				hideSoftKeyBoard(view.getWindowToken());			}		}		switch (ev.getAction()) {			case MotionEvent.ACTION_DOWN:				application.handler_touch.removeMessages(0);				break;			case MotionEvent.ACTION_UP:				application.handler_touch.sendEmptyMessageDelayed(0, application.screensaver_time * 1000);				break;		}		return super.dispatchTouchEvent(ev);	}	private boolean isShouldHideSoftKeyBoard(View view, MotionEvent event) {		if (view != null && (view instanceof EditText)) {			int[] l = { 0, 0 };			int left = l[0];			int top = l[1];			if (event.getX() < left || (event.getX() > left + view.getWidth()) || event.getY() < top					|| (event.getY() > top + view.getHeight())) {				return true;			} else {				return false;			}		}		return false;	}	private void hideSoftKeyBoard(IBinder token) {		if (token != null) {			InputMethodManager im = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);			im.hideSoftInputFromWindow(token, InputMethodManager.HIDE_NOT_ALWAYS);		}	}}