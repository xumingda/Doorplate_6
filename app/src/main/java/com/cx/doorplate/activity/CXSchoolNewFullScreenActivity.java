package com.cx.doorplate.activity;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Bitmap;import android.graphics.drawable.BitmapDrawable;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentActivity;import android.support.v4.content.LocalBroadcastManager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.WindowManager;import android.view.animation.AnimationUtils;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Button;import android.widget.ImageSwitcher;import android.widget.ImageView;import android.widget.ImageView.ScaleType;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.SimpleAdapter;import android.widget.TextClock;import android.widget.TextView;import android.widget.ViewSwitcher.ViewFactory;import com.advertisement.activity.DisplayManager;import com.cx.doorplate.fragment.TeacherFragment;import com.yy.doorplate.MyApplication;import com.yy.doorplate.R;import com.yy.doorplate.adapter.MyViewPagerAdapter;import com.yy.doorplate.communication.FTPManager;import com.yy.doorplate.communication.HttpProcess;import com.yy.doorplate.database.CarouselDatabase;import com.yy.doorplate.database.NoticeInfoDatabase;import com.yy.doorplate.database.PicDreOrActivityDatabase;import com.yy.doorplate.database.PlayTaskDatabase;import com.yy.doorplate.database.ScreensaverDatabase;import com.yy.doorplate.database.TeacherInfoDatabase;import com.yy.doorplate.database.XyxxDatabase;import com.yy.doorplate.model.CarouselModel;import com.yy.doorplate.model.NoticeInfoModel;import com.yy.doorplate.model.PicDreOrActivityModel;import com.yy.doorplate.model.PlayTaskModel;import com.yy.doorplate.model.ScreensaverModel;import com.yy.doorplate.model.TeacherInfoModel;import com.yy.doorplate.model.XyxxTypeModel;import com.yy.doorplate.tool.ImageLoader;import com.yy.doorplate.tool.ImageLoader.OnImageLoaderListener;import com.yy.doorplate.view.CustomTextView;import com.yy.doorplate.view.CustomViewpager;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import java.io.File;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class CXSchoolNewFullScreenActivity extends FragmentActivity implements        OnClickListener, OnItemClickListener {    private final String TAG = "CXSchoolNewActivity";    private MyApplication application;    private LocalBroadcastManager broadcastManager;    private MyBroadcastReceiver myBroadcastReceiver;    private RelativeLayout ly_schoolnew_banner;    private Button btn_cx_back;    private TextView txt_weather, txt_xxxw;    private CustomTextView txt_school_name;    private TextClock textClock;    private ImageSwitcher img_schoolnew_banner;    private ImageLoader imageLoader = null;    private List<String> pics;    private int pics_i = 0;    private List<Map<String, String>> new_pics = null;    private int new_pics_i = 0;    private DisplayManager displayManager_media = null;    private List<NoticeInfoModel> noticeInfoModels = null;    private List<TeacherInfoModel> teacherInfoModels = null;    private List<Fragment> fragments;    private int fragment_total, fragment_i;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.cx_activity_full_schoolnew);        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        application = (MyApplication) getApplicationContext();        imageLoader = new ImageLoader(application);        broadcastManager = LocalBroadcastManager.getInstance(this);        myBroadcastReceiver = new MyBroadcastReceiver();        IntentFilter filter = new IntentFilter();        filter.addAction(MyApplication.BROADCAST);        broadcastManager.registerReceiver(myBroadcastReceiver, filter);        initView();    }    private void initView() {        ly_schoolnew_banner = (RelativeLayout) findViewById(R.id.ly_schoolnew_banner);        btn_cx_back=(Button)findViewById(R.id.btn_cx_back);        btn_cx_back.setOnClickListener(this);        txt_weather = (TextView) findViewById(R.id.txt_weather);        txt_xxxw = (TextView) findViewById(R.id.txt_xxxw);        txt_school_name = (CustomTextView) findViewById(R.id.txt_school_name);        img_schoolnew_banner = (ImageSwitcher) findViewById(R.id.img_schoolnew_banner);        textClock = (TextClock) findViewById(R.id.textClock);        textClock.setFormat12Hour(null);        textClock.setFormat24Hour("yyyyƒÍMM‘¬dd»’\nEEEE      HH : mm");        img_schoolnew_banner.setFactory(new ViewFactory() {            @Override            public View makeView() {                ImageView imageView = new ImageView(CXSchoolNewFullScreenActivity.this);                ImageSwitcher.LayoutParams params = new ImageSwitcher.LayoutParams(                        ImageSwitcher.LayoutParams.MATCH_PARENT,                        ImageSwitcher.LayoutParams.MATCH_PARENT);                imageView.setScaleType(ScaleType.FIT_XY);                imageView.setLayoutParams(params);                return imageView;            }        });        img_schoolnew_banner.setInAnimation(AnimationUtils.loadAnimation(this,                R.anim.enteralpha));        img_schoolnew_banner.setOutAnimation(AnimationUtils.loadAnimation(this,                R.anim.exitalpha));        txt_weather.setText(application.currentCity.trim() + "   "                + application.temperature.trim() + "\n"                + application.weather.trim());        XyxxDatabase database = new XyxxDatabase();        XyxxTypeModel xyxxTypeModel = database.query();        if (xyxxTypeModel != null) {            txt_school_name.setText(xyxxTypeModel.xymc);        }    }    private void updata_banner() {        handler.removeMessages(0);        handler.removeMessages(1);        ly_schoolnew_banner.removeAllViews();        ly_schoolnew_banner.setVisibility(View.INVISIBLE);        img_schoolnew_banner.setVisibility(View.VISIBLE);        CarouselDatabase carouselDatabase = new CarouselDatabase();        List<CarouselModel> carouselModels = carouselDatabase.query(                "modelType = ?", new String[] { CarouselModel.TYPE_SCHOOL });        pics = new ArrayList<String>();        pics_i = 0;        new_pics = new ArrayList<Map<String, String>>();        new_pics_i = 0;        if (carouselModels != null && carouselModels.size() > 0) {            CarouselModel model = carouselModels.get(0);            Log.e("Õº","Õº1"+model.dataSource);            if (CarouselModel.SOURCE_SX.equals(model.dataSource)) {                PlayTaskDatabase database = new PlayTaskDatabase();                List<PlayTaskModel> list = database.query(                        "playType = ? and position = ? and srcType = ?",                        new String[] { "REGION_MEDIA", "02", "TEMPLATE" });                String policyPath = null;                if (list != null && list.size() > 0) {                    if (TextUtils.isEmpty(list.get(0).srcPath)) {                        File file = new File(                                application.getFtpPath(list.get(0).srcPath));                        if (file.exists()) {                            policyPath = application                                    .getFtpPath(list.get(0).srcPath);                        }                    }                }                if (!TextUtils.isEmpty(policyPath)) {                    ly_schoolnew_banner.removeAllViews();                    ly_schoolnew_banner.setVisibility(View.VISIBLE);                    img_schoolnew_banner.setVisibility(View.INVISIBLE);                    if (displayManager_media == null) {                        displayManager_media = new DisplayManager(this,                                application, ly_schoolnew_banner);                        displayManager_media.start(policyPath);                    } else {                        displayManager_media.stop();                        displayManager_media.destroy();                        displayManager_media.start(policyPath);                    }                } else {                    updata_banner_default();                }            } else if (CarouselModel.SOURCE_CLASS_PHOTO                    .equals(model.dataSource)) {                PicDreOrActivityDatabase database = new PicDreOrActivityDatabase();                List<PicDreOrActivityModel> list = database.query(                        "objectType = ? and kind = ?",                        new String[] { "1", "2" });                if (list != null && list.size() > 0) {                    for (PicDreOrActivityModel picModel : list) {                        if (!TextUtils.isEmpty(picModel.objectEntityAddress)) {                            String[] s = picModel.objectEntityAddress                                    .split("/");                            String path = MyApplication.PATH_ROOT                                    + MyApplication.PATH_PHOTO + "/"                                    + s[s.length - 1];                            pics.add(path);                        }                    }                }                updata_banner_pic();            } else if (CarouselModel.SOURCE_SCHOOL_PHOTO                    .equals(model.dataSource)) {                PicDreOrActivityDatabase database = new PicDreOrActivityDatabase();                List<PicDreOrActivityModel> list = database.query(                        "objectType = ? and kind = ?",                        new String[] { "1", "1" });                if (list != null && list.size() > 0) {                    for (PicDreOrActivityModel picModel : list) {                        if (!TextUtils.isEmpty(picModel.objectEntityAddress)) {                            String[] s = picModel.objectEntityAddress                                    .split("/");                            String path = MyApplication.PATH_ROOT                                    + MyApplication.PATH_PHOTO + "/"                                    + s[s.length - 1];                            pics.add(path);                        }                    }                }                updata_banner_pic();            } else if (CarouselModel.SOURCE_CXXXT.equals(model.dataSource)) {                ScreensaverDatabase database = new ScreensaverDatabase();                List<ScreensaverModel> list = database.query_all();                if (list != null && list.size() > 0) {                    for (ScreensaverModel screensaverModel : list) {                        if (!TextUtils.isEmpty(screensaverModel.url)) {                            String[] s = screensaverModel.url.split("/");                            String path = MyApplication.PATH_ROOT                                    + MyApplication.PATH_SCREENSAVER + "/"                                    + s[s.length - 1];                            pics.add(path);                        }                    }                }                updata_banner_pic();            } else {                updata_banner_default();            }        } else {            Log.e("Õº","Õº2");            updata_banner_default();        }    }    private void updata_banner_pic() {        Log.e("Õº","Õº3:"+pics.size());        if (pics != null && pics.size() > 0) {            if (pics.size() == 1) {                imageLoader.getBitmapFormUrl(pics.get(0),                        new OnImageLoaderListener() {                            @Override                            public void onImageLoader(Bitmap bitmap, String url) {                                if (bitmap != null)                                    img_schoolnew_banner                                            .setImageDrawable(new BitmapDrawable(                                                    bitmap));                                else                                    updata_banner_default();                            }                        }, 290, 290);            } else if (pics.size() > 1) {                boolean b = false;                for (String s : pics) {                    File file = new File(s);                    if (file.exists()) {                        b = true;                        break;                    }                }                if (b) {                    handler.sendEmptyMessage(0);                } else {                    updata_banner_default();                }            }        } else {            updata_banner_default();        }    }    private void updata_banner_default() {        imageLoader.getBitmapFormRes(R.drawable.cx_ly_schoolnew_banner,                new OnImageLoaderListener() {                    @Override                    public void onImageLoader(Bitmap bitmap, String url) {                        img_schoolnew_banner                                .setImageDrawable(new BitmapDrawable(bitmap));                    }                });    }    private void downLoadImg(final String urlStr, final String path) {        if (TextUtils.isEmpty(urlStr)) {            return;        }        final File file = new File(path);        if (file.exists()) {            return;        }        application.executoService.execute(new Runnable() {            @Override            public void run() {                if (urlStr.startsWith("ftp")) {                    FTPManager ftpManager = new FTPManager();                    if (ftpManager.connect(urlStr, path)) {                        if (ftpManager.download()) {                            handler.sendEmptyMessage(1);                        } else {                            if (new_pics.size() > new_pics_i) {                                new_pics.remove(new_pics_i);                                new_pics_i = 0;                                handler.sendEmptyMessage(1);                            }                        }                    } else {                        if (new_pics.size() > new_pics_i) {                            new_pics.remove(new_pics_i);                            new_pics_i = 0;                            handler.sendEmptyMessage(1);                        }                    }                } else {                    if (application.httpDownLoad(urlStr, path)) {                        handler.sendEmptyMessage(1);                    } else {                        if (new_pics.size() > new_pics_i) {                            new_pics.remove(new_pics_i);                            new_pics_i = 0;                            handler.sendEmptyMessage(1);                        }                    }                }            }        });    }    private Handler handler = new Handler() {        public void handleMessage(Message msg) {            switch (msg.what) {                case 0: {                    imageLoader.getBitmapFormUrl(pics.get(pics_i),                            new OnImageLoaderListener() {                                @Override                                public void onImageLoader(Bitmap bitmap, String url) {                                    if (bitmap != null)                                        img_schoolnew_banner                                                .setImageDrawable(new BitmapDrawable(                                                        bitmap));                                    if (pics_i == pics.size() - 1) {                                        pics_i = 0;                                    } else {                                        pics_i++;                                    }                                    handler.sendEmptyMessageDelayed(0, 5 * 1000);                                }                            }, 290, 290);                    break;                }                case 1: {                    if (new_pics.size() == 1) {                        File file = new File(new_pics.get(0).get("path"));                        if (!file.exists()) {                            downLoadImg(new_pics.get(0).get("url"), new_pics.get(0)                                    .get("path"));                        } else {                            imageLoader.getBitmapFormUrl(new_pics.get(0)                                    .get("path"), new OnImageLoaderListener() {                                @Override                                public void onImageLoader(Bitmap bitmap, String url) {                                    if (bitmap != null)                                        img_schoolnew_banner                                                .setImageDrawable(new BitmapDrawable(                                                        bitmap));                                }                            }, 290, 290);                        }                    } else if (new_pics.size() > 1) {                        File file = new File(new_pics.get(new_pics_i).get("path"));                        if (!file.exists()) {                            downLoadImg(new_pics.get(new_pics_i).get("url"),                                    new_pics.get(new_pics_i).get("path"));                        } else {                            imageLoader.getBitmapFormUrl(new_pics.get(new_pics_i)                                    .get("path"), new OnImageLoaderListener() {                                @Override                                public void onImageLoader(Bitmap bitmap, String url) {                                    if (bitmap != null)                                        img_schoolnew_banner                                                .setImageDrawable(new BitmapDrawable(                                                        bitmap));                                    if (new_pics_i == new_pics.size() - 1) {                                        new_pics_i = 0;                                    } else {                                        new_pics_i++;                                    }                                    handler.sendEmptyMessageDelayed(1, 5 * 1000);                                }                            }, 290, 290);                        }                    }                    break;                }            }        }    };    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.btn:{                Intent intent = new Intent(this, CXClassNewFullScreenActivity.class);                startActivity(intent);                break;            }            case R.id.btn_cx_back:                finish();                break;            case R.id.btn_schoolnew: {                Intent intent = new Intent(this, CXNoticeListActivity.class);                intent.putExtra("type", 5);                startActivity(intent);                break;            }            case R.id.btn_schoolnew_notice: {                Intent intent = new Intent(this, CXNoticeListActivity.class);                intent.putExtra("type", 1);                startActivity(intent);                break;            }            case R.id.btn_schoolnew_activity: {                Intent intent = new Intent(this, CXVoteActivity.class);                intent.putExtra("type", 1);                startActivity(intent);                break;            }            case R.id.btn_schoolnew_photo: {                Intent intent = new Intent(this, CXPhotoActivity.class);                intent.putExtra("type", 1);                startActivity(intent);                break;            }            case R.id.btn_schoolnew_quest: {                Intent intent = new Intent(this, CXQuestActivity.class);                intent.putExtra("type", 1);                startActivity(intent);                break;            }            case R.id.btn_schoolnew_more: {                Intent intent = new Intent(this, CXAppActivity.class);                startActivity(intent);                break;            }            case R.id.btn_jsfc_all: {                Intent intent = new Intent(this, CXTeacherActivity.class);                startActivity(intent);                break;            }            case R.id.txt_xxxw_more: {                Intent intent = new Intent(this, CXNoticeListActivity.class);                intent.putExtra("type", 3);                startActivity(intent);                break;            }        }    }    @Override    public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {        Intent intent = new Intent(this, CXNoticeDetailsActivity.class);        intent.putExtra("type", 3);        intent.putExtra("id", noticeInfoModels.get(arg2).id);        startActivity(intent);    }    private class MyBroadcastReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            if (!intent.getAction().equals(MyApplication.BROADCAST)) {                return;            }            String tag = intent.getStringExtra(MyApplication.BROADCAST_TAG);            if (tag.equals(HttpProcess.QRY_NOTICE) && !application.isUpdateEQ                    && !application.isUpdataNoticeList) {                boolean result = intent.getBooleanExtra(                        MyApplication.CMD_RESULT, false);                String msg = intent.getStringExtra(MyApplication.CMD_MSG);                if (result) {                    Log.d(TAG, tag + " " + msg);                    application.showToast("∏¸–¬Õ®÷™ÕÍ≥…");                } else {                    Log.e(TAG, tag + " " + msg);                    application.showToast("∏¸–¬Õ®÷™ ß∞‹£¨‘≠“Ú£∫" + msg);                }                application.isUpdateNotice = false;            } else if (tag.equals("updataEQ")) {                txt_weather.setText(application.currentCity.trim() + "   "                        + application.temperature.trim() + "\n"                        + application.weather.trim());                XyxxDatabase database = new XyxxDatabase();                XyxxTypeModel xyxxTypeModel = database.query();                if (xyxxTypeModel != null) {                    txt_school_name.setText(xyxxTypeModel.xymc);                }            } else if (tag.equals("playTask")) {                Log.d(TAG, "------playTask------");                updata_banner();            } else if (tag.equals("permission_finish")) {                finish();            }        }    }    @Override    protected void onStart() {        super.onStart();        updata_banner();        application.handler_touch.removeMessages(0);        application.handler_touch.sendEmptyMessageDelayed(0,                application.screensaver_time * 1000);    }    @Override    protected void onStop() {        super.onStop();        handler.removeMessages(0);        handler.removeMessages(1);        if (displayManager_media != null) {            displayManager_media.stop();        }    }    @Override    protected void onDestroy() {        super.onDestroy();        handler.removeMessages(0);        handler.removeMessages(1);        imageLoader.cancelTask();        imageLoader.clearCache();        broadcastManager.unregisterReceiver(myBroadcastReceiver);        if (displayManager_media != null) {            displayManager_media.stop();            displayManager_media.destroy();        }    }    @Override    public boolean dispatchKeyEvent(KeyEvent event) {        switch (event.getAction()) {            case KeyEvent.ACTION_DOWN:                application.handler_touch.removeMessages(0);                break;            case KeyEvent.ACTION_UP:                application.handler_touch.sendEmptyMessageDelayed(0,                        application.screensaver_time * 1000);                break;        }        return super.dispatchKeyEvent(event);    }    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        switch (ev.getAction()) {            case MotionEvent.ACTION_DOWN:                application.handler_touch.removeMessages(0);                break;            case MotionEvent.ACTION_UP:                application.handler_touch.sendEmptyMessageDelayed(0,                        application.screensaver_time * 1000);                break;        }        return super.dispatchTouchEvent(ev);    }}