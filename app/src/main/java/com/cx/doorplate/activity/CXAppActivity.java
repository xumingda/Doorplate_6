package com.cx.doorplate.activity;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import android.app.Activity;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.DialogInterface.OnDismissListener;import android.content.DialogInterface.OnKeyListener;import android.content.Intent;import android.content.IntentFilter;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.content.LocalBroadcastManager;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.GridView;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextClock;import android.widget.TextView;import com.yy.doorplate.MyApplication;import com.yy.doorplate.R;import com.yy.doorplate.activity.SettingActivity;import com.yy.doorplate.activity.VideoCallActivity;import com.yy.doorplate.activity.WebviewActivity;import com.yy.doorplate.activity.ZhiriActivity;import com.yy.doorplate.communication.HttpProcess;import com.yy.doorplate.database.UserInfoDatabase;import com.yy.doorplate.tool.ImageLoader;import com.yy.doorplate.tool.ImageLoader.OnImageLoaderListener;public class CXAppActivity extends Activity implements OnClickListener, OnItemClickListener {    private final String TAG = "CXAppActivity";    private MyApplication application;    private LocalBroadcastManager broadcastManager;    private MyBroadcastReceiver myBroadcastReceiver;    private ImageLoader imageLoader;    private Button btn_cx_back;    private TextView txt_weather;    private TextClock textClock;    private GridView gv_app;    private List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.cx_activity_app);        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        application = (MyApplication) getApplicationContext();        imageLoader = new ImageLoader(application);        broadcastManager = LocalBroadcastManager.getInstance(this);        myBroadcastReceiver = new MyBroadcastReceiver();        IntentFilter filter = new IntentFilter();        filter.addAction(MyApplication.BROADCAST);        broadcastManager.registerReceiver(myBroadcastReceiver, filter);        initView();    }    private void initView() {        btn_cx_back = (Button) findViewById(R.id.btn_cx_back);        txt_weather = (TextView) findViewById(R.id.txt_weather);        gv_app = (GridView) findViewById(R.id.gv_app);        textClock = (TextClock) findViewById(R.id.textClock);        textClock.setFormat12Hour(null);        textClock.setFormat24Hour("yyyy年MM月dd日\nEEEE      HH : mm");        txt_weather.setText(application.currentCity.trim() + "   " + application.temperature.trim() + "\n"                + application.weather.trim());        btn_cx_back.setOnClickListener(this);        gv_app.setOnItemClickListener(this);        initDate();        MyAdapter adapter = new MyAdapter();        gv_app.setAdapter(adapter);    }    private void initDate() {        //班级相关        Map<String, Object> map;        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_btn_main_class);        map.put("txt", "班级风采");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_bjtz);        map.put("txt", "班级通知");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_bjxc);        map.put("txt", "班级相册");        list.add(map);        //除掉//		map = new HashMap<String, Object>();//		map.put("id", R.drawable.cx_img_app_star);//		map.put("txt", "班级之星");//		list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_cxxk);        map.put("txt", "选课查询");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_bjly);        map.put("txt", "班级荣誉");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_bjkq);        map.put("txt", "班级考勤");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_bjdc);        map.put("txt", "班级调查");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_bjhd);        map.put("txt", "班级活动");        list.add(map);        //校园相关        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_btn_mian_school);        map.put("txt", "校园文化");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_xxxc);        map.put("txt", "校园相册");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_xxhd);        map.put("txt", "校园活动");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_xxtz);        map.put("txt", "校园通知");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_xxly);        map.put("txt", "学校荣誉");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_xxdc);        map.put("txt", "校园调查");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_btn_mian_msg);        map.put("txt", "家校留言");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_btn_main_read);        map.put("txt", "数字阅读");        list.add(map);        //其他        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_grxx);        map.put("txt", "个人信息");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_leave);        map.put("txt", "在线请假");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_talk);        map.put("txt", "视频对讲");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_control);        map.put("txt", "物联网");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_setting);        map.put("txt", "系统设置");        list.add(map);        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_weather);        map.put("txt", "天气预报");        list.add(map);        // map = new HashMap<String, Object>();        // map.put("id", R.drawable.cx_img_app_face);        // map.put("txt", "人脸考勤");        // list.add(map);        if (application.isAppInstalled(this, MyApplication.CHAOXING)) {            map = new HashMap<String, Object>();            map.put("id", R.drawable.cx_btn_mian_cxxxt);            map.put("txt", "学习通");            list.add(map);        }        map = new HashMap<String, Object>();        map.put("id", R.drawable.cx_img_app_zhiri);        map.put("txt", "值日表");        list.add(map);        // map = new HashMap<String, Object>();        // map.put("id", R.drawable.cx_img_app_borrow);        // map.put("txt", "借还机");        // list.add(map);        // map = new HashMap<String, Object>();        // map.put("id", R.drawable.ic_launcher);        // map.put("txt", "阅读器");        // list.add(map);    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.btn_cx_back:                finish();                break;            case R.id.btn_permission_user: {                btn_permission_user.setBackgroundResource(R.drawable.btn_permission_type);                btn_permission_user.setTextColor(getResources().getColor(R.color.white));                ly_permission_user.setVisibility(View.VISIBLE);                btn_permission_card.setBackgroundResource(R.drawable.btn_permission_type_click);                btn_permission_card.setTextColor(getResources().getColor(R.color.blue));                ly_permission_card.setVisibility(View.INVISIBLE);                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                if (imm != null)                    imm.toggleSoftInput(0, InputMethodManager.HIDE_NOT_ALWAYS);                break;            }            case R.id.btn_permission_card: {                btn_permission_card.setBackgroundResource(R.drawable.btn_permission_type);                btn_permission_card.setTextColor(getResources().getColor(R.color.white));                ly_permission_card.setVisibility(View.VISIBLE);                btn_permission_user.setBackgroundResource(R.drawable.btn_permission_type_click);                btn_permission_user.setTextColor(getResources().getColor(R.color.blue));                ly_permission_user.setVisibility(View.INVISIBLE);                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                if (imm != null && edt_permission_user != null)                    imm.hideSoftInputFromWindow(edt_permission_user.getWindowToken(), 0);                break;            }            case R.id.btn_premission_login:                String name = edt_permission_user.getText().toString();                String pwd = edt_permission_pwd.getText().toString();                if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(pwd)) {                    if (name.equals("admin") && pwd.equals("admin123!@#")) {                        application.showToast("认证通过");                        if (application.dialog != null && application.dialog.isShowing()) {                            application.dialog.dismiss();                        }                        if (application.operateType.equals("CONTROL")) {                            application.openOrvibo("3", null);                        } else if (application.operateType.equals("VEDIO_CALL")) {                            application.call_from_who = name;                            Intent i = new Intent(CXAppActivity.this, VideoCallActivity.class);                            startActivity(i);                        } else if (application.operateType.equals("SETTING")) {                            Intent i = new Intent(CXAppActivity.this, SettingActivity.class);                            startActivity(i);                        }                        return;                    }                    UserInfoDatabase userInfoDatabase = new UserInfoDatabase();                    if (userInfoDatabase.query_by_userName(name, pwd) != null) {                        application.showToast("认证通过");                        if (application.dialog != null && application.dialog.isShowing()) {                            application.dialog.dismiss();                        }                        if (application.operateType.equals("CONTROL")) {                            // Intent i = new Intent(CXAppActivity.this,                            // ControlActivity.class);                            // startActivity(i);                            application.openOrvibo("1", userInfoDatabase.query_by_userName(name, pwd).userName);                        } else if (application.operateType.equals("VEDIO_CALL")) {                            application.call_from_who = name;                            Intent i = new Intent(CXAppActivity.this, VideoCallActivity.class);                            startActivity(i);                        } else if (application.operateType.equals("SETTING")) {                            Intent i = new Intent(CXAppActivity.this, SettingActivity.class);                            startActivity(i);                        }                        return;                    }                    btn_premission_login.setEnabled(false);                    if (progressDialog == null) {                        progressDialog = ProgressDialog.show(CXAppActivity.this, null, "认证中，请稍后", false, false);                    }                    application.httpProcess.Permission(application.equInfoModel.jssysdm, application.operateType,                            "ACCOUNT_PASSWORD", name, pwd, "");                    if (application.operateType.equals("VEDIO_CALL")) {                        application.call_from_who = name;                    }                } else {                    application.showToast("账号或密码不能为空");                }                break;            case R.id.btn_premission_cancel1:            case R.id.btn_premission_cancel2:                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                if (imm != null && edt_permission_user != null)                    imm.hideSoftInputFromWindow(edt_permission_user.getWindowToken(), 0);                if (application.dialog != null && application.dialog.isShowing()) {                    application.dialog.dismiss();                }                break;        }    }    @Override    public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {        switch ((Integer) list.get(arg2).get("id")) {            case R.drawable.cx_img_app_cxxk: {                Intent intent = new Intent(this, CXXKStudentActivity.class);                startActivity(intent);                break;            }            case R.drawable.cx_btn_main_class: {                Intent intent = new Intent(this, CXClassNewActivity.class);                startActivity(intent);                break;            }            case R.drawable.cx_btn_mian_school: {                Intent intent = new Intent(this, CXSchoolNewActivity.class);                startActivity(intent);                break;            }            case R.drawable.cx_btn_main_read: {                try {                    application.openApp(this, MyApplication.READ);                } catch (Exception e) {                    e.printStackTrace();                    Intent intent = new Intent(this, WebviewActivity.class);                    startActivity(intent);                }                break;            }            case R.drawable.cx_img_app_talk: {                application.operateType = "VEDIO_CALL";                DialogPermission();                break;            }            case R.drawable.cx_img_app_control: {                application.operateType = "CONTROL";                DialogPermission();                break;            }            case R.drawable.cx_img_app_setting: {                application.operateType = "SETTING";                DialogPermission();                break;            }            case R.drawable.cx_img_app_leave: {                // application.showToast("敬请期待");                Intent intent = new Intent(this, CXGrxxActivity.class);                intent.putExtra("from", 5);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_grxx: {                Intent intent = new Intent(this, CXGrxxActivity.class);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_weather: {//			application.showToast("敬请期待");                Intent intent = new Intent(this, CXWeatherActivity.class);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_bjdc: {                Intent intent = new Intent(this, CXQuestActivity.class);                intent.putExtra("type", 2);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_bjtz: {                Intent intent = new Intent(this, CXNoticeListActivity.class);                intent.putExtra("type", 2);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_bjhd: {                Intent intent = new Intent(this, CXVoteActivity.class);                intent.putExtra("type", 2);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_bjxc: {                Intent intent = new Intent(this, CXPhotoActivity.class);                intent.putExtra("type", 2);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_star: {                Intent intent = new Intent(this, CXHonorActivity.class);                intent.putExtra("type", 3);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_bjly: {                Intent intent = new Intent(this, CXHonorActivity.class);                intent.putExtra("type", 2);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_xxly: {                Intent intent = new Intent(this, CXHonorActivity.class);                intent.putExtra("type", 1);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_xxdc: {                Intent intent = new Intent(this, CXQuestActivity.class);                intent.putExtra("type", 1);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_xxtz: {                Intent intent = new Intent(this, CXNoticeListActivity.class);                intent.putExtra("type", 1);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_xxhd: {                Intent intent = new Intent(this, CXVoteActivity.class);                intent.putExtra("type", 1);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_xxxc: {                Intent intent = new Intent(this, CXPhotoActivity.class);                intent.putExtra("type", 1);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_bjkq: {                if (application.classInfoModel != null) {                    Intent intent = new Intent(this, CXAttendBJActivity.class);                    startActivity(intent);                }                break;            }            case R.drawable.cx_btn_mian_msg: {                // application.showToast("敬请期待");                Intent intent = new Intent(this, CXGrxxActivity.class);                intent.putExtra("from", 4);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_face: {                Intent intent = new Intent(this, CXFaceRegister.class);                startActivity(intent);                break;            }            case R.drawable.cx_btn_mian_cxxxt: {                application.cardType = "QRY_PERSON_CHAOXING";                DialogPermissionOnlyCard();                break;            }            case R.drawable.cx_img_app_zhiri: {                Intent intent = new Intent(this, ZhiriActivity.class);                startActivity(intent);                break;            }            case R.drawable.cx_img_app_borrow: {                // application.cardType = "QRY_PERSON_BORROW";                // DialogPermissionOnlyCard();                break;            }            case R.drawable.ic_launcher: {                application.createFloating();                PackageManager packageManager = getPackageManager();                Intent intent = packageManager.getLaunchIntentForPackage("com.chineseall.etextbook");                startActivity(intent);                break;            }        }    }    private Handler handler = new Handler() {        public void handleMessage(Message msg) {            application.createFloating();        }    };    private ProgressDialog progressDialog = null;    private EditText edt_permission_user, edt_permission_pwd;    private Button btn_permission_user, btn_permission_card, btn_premission_login, btn_premission_cancel1,            btn_premission_cancel2;    private RelativeLayout ly_permission_user, ly_permission_card;    private void DialogPermission() {        AlertDialog.Builder builder = new AlertDialog.Builder(CXAppActivity.this);        application.dialog = builder.create();        LayoutInflater inflater = LayoutInflater.from(application);        RelativeLayout layout = (RelativeLayout) inflater.inflate(R.layout.dialog_permission, null);        application.dialog.setView(layout);        application.dialog.show();        application.dialog.getWindow().setLayout(900, 700);        application.dialog.getWindow().setContentView(R.layout.dialog_permission);        // application.dialog.getWindow().setSoftInputMode(        // WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);        application.dialog.setOnKeyListener(new OnKeyListener() {            @Override            public boolean onKey(DialogInterface arg0, int arg1, KeyEvent arg2) {                if (arg2.getAction() == KeyEvent.ACTION_UP && arg1 == KeyEvent.KEYCODE_MENU                        && !TextUtils.isEmpty(application.operateType)                        && application.operateType.equals("VEDIO_CALL")) {                    if (application.dialog != null && application.dialog.isShowing()) {                        application.dialog.dismiss();                    }                }                return false;            }        });        application.dialog.setOnDismissListener(new OnDismissListener() {            @Override            public void onDismiss(DialogInterface dialogInterface) {                application.operateType = null;                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                if (imm != null)                    imm.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(), 0);                if (progressDialog != null && progressDialog.isShowing()) {                    progressDialog.dismiss();                    progressDialog = null;                }            }        });        ly_permission_user = (RelativeLayout) application.dialog.findViewById(R.id.ly_permission_user);        ly_permission_card = (RelativeLayout) application.dialog.findViewById(R.id.ly_permission_card);        edt_permission_user = (EditText) application.dialog.findViewById(R.id.edt_permission_user);        edt_permission_pwd = (EditText) application.dialog.findViewById(R.id.edt_permission_pwd);        btn_permission_user = (Button) application.dialog.findViewById(R.id.btn_permission_user);        btn_permission_card = (Button) application.dialog.findViewById(R.id.btn_permission_card);        btn_premission_login = (Button) application.dialog.findViewById(R.id.btn_premission_login);        btn_premission_cancel1 = (Button) application.dialog.findViewById(R.id.btn_premission_cancel1);        btn_premission_cancel2 = (Button) application.dialog.findViewById(R.id.btn_premission_cancel2);        btn_permission_user.setOnClickListener(this);        btn_permission_card.setOnClickListener(this);        btn_premission_login.setOnClickListener(this);        btn_premission_cancel1.setOnClickListener(this);        btn_premission_cancel2.setOnClickListener(this);        edt_permission_user.addTextChangedListener(application.textWatcher);        edt_permission_pwd.addTextChangedListener(application.textWatcher);        // btn_permission_card.setEnabled(false);        // btn_permission_user        // .setBackgroundResource(R.drawable.btn_permission_type);        // btn_permission_user        // .setTextColor(getResources().getColor(R.color.white));        // ly_permission_user.setVisibility(View.VISIBLE);        // btn_permission_card        // .setBackgroundResource(R.drawable.btn_permission_type_click);        // btn_permission_card.setTextColor(getResources().getColor(R.color.blue));        // ly_permission_card.setVisibility(View.INVISIBLE);        // InputMethodManager imm = (InputMethodManager)        // getSystemService(Context.INPUT_METHOD_SERVICE);        // imm.toggleSoftInput(0, InputMethodManager.HIDE_NOT_ALWAYS);    }    private void DialogPermissionOnlyCard() {        AlertDialog.Builder builder = new AlertDialog.Builder(CXAppActivity.this);        application.dialog = builder.create();        LayoutInflater inflater = LayoutInflater.from(application);        RelativeLayout layout = (RelativeLayout) inflater.inflate(R.layout.dialog_permission_onlycard, null);        application.dialog.setView(layout);        application.dialog.show();        application.dialog.getWindow().setLayout(900, 700);        application.dialog.getWindow().setContentView(R.layout.dialog_permission_onlycard);        application.dialog.setOnDismissListener(new OnDismissListener() {            @Override            public void onDismiss(DialogInterface dialogInterface) {                application.cardType = null;                if (progressDialog != null && progressDialog.isShowing()) {                    progressDialog.dismiss();                    progressDialog = null;                }            }        });        btn_premission_cancel2 = (Button) application.dialog.findViewById(R.id.btn_premission_cancel2);        btn_premission_cancel2.setOnClickListener(this);    }    private class MyAdapter extends BaseAdapter {        @Override        public int getCount() {            return list.size();        }        @Override        public Object getItem(int position) {            return list.get(position);        }        @Override        public long getItemId(int position) {            return position;        }        private class ViewHolder {            private ImageView img_item_app;            private TextView txt_item_app;        }        @Override        public View getView(int position, View view, ViewGroup parent) {            ViewHolder viewHolder = null;            if (viewHolder == null) {                viewHolder = new ViewHolder();                view = LayoutInflater.from(application).inflate(R.layout.cx_item_app, null);                viewHolder.img_item_app = (ImageView) view.findViewById(R.id.img_item_app);                viewHolder.txt_item_app = (TextView) view.findViewById(R.id.txt_item_app);                view.setTag(viewHolder);            } else {                viewHolder = (ViewHolder) view.getTag();            }            int id = (Integer) list.get(position).get("id");            viewHolder.txt_item_app.setText(list.get(position).get("txt").toString());            viewHolder.img_item_app.setTag(id + "");            imageLoader.getBitmapFormRes(id, new OnImageLoaderListener() {                @Override                public void onImageLoader(Bitmap bitmap, String url) {                    ImageView mImageView = (ImageView) gv_app.findViewWithTag(url);                    if (mImageView != null && bitmap != null) {                        mImageView.setImageBitmap(bitmap);                    }                }            });            return view;        }    }    private class MyBroadcastReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            if (!intent.getAction().equals(MyApplication.BROADCAST)) {                return;            }            String tag = intent.getStringExtra(MyApplication.BROADCAST_TAG);            if (tag.equals("permission_finish")) {                finish();            } else if (tag.equals(HttpProcess.OPERATE_AUTHORIZATION)) {                if (TextUtils.isEmpty(application.operateType)) {                    return;                }                if (btn_premission_login != null) {                    btn_premission_login.setEnabled(true);                }                if (progressDialog != null && progressDialog.isShowing()) {                    progressDialog.dismiss();                    progressDialog = null;                }            } else if (tag.equals("permission_ui")) {                if (progressDialog == null) {                    progressDialog = ProgressDialog.show(CXAppActivity.this, null, "认证中，请稍后", false, false);                }            } else if (tag.equals("QRY_PERSON_CHAOXING")) {                String mCardNum = intent.getStringExtra("mCardNum");                showProgressDialog();                application.httpProcess.QryPerson(application.equInfoModel.jssysdm, mCardNum);            } else if (tag.equals("QRY_PERSON_BORROW")) {                String mCardNum = intent.getStringExtra("mCardNum");                showProgressDialog();                application.httpProcess.QryPerson(application.equInfoModel.jssysdm, mCardNum);            } else if (tag.equals(HttpProcess.QRY_PERSON) && "QRY_PERSON_CHAOXING".equals(application.cardType)) {                boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);                String msg = intent.getStringExtra(MyApplication.CMD_MSG);                String chaoxingUser = null, fid = null;                if (result) {                    chaoxingUser = intent.getStringExtra("chaoxingUser");                    fid = intent.getStringExtra("fid");                }                if (!TextUtils.isEmpty(chaoxingUser) && !TextUtils.isEmpty(fid)) {                    application.launchStudy(fid, chaoxingUser);                    handler.sendEmptyMessageDelayed(0, 1000 * 3);                    if (application.dialog != null && application.dialog.isShowing()) {                        application.dialog.dismiss();                    }                } else {                    Log.e(TAG, tag + " " + msg);                    application.showToast("查询人员失败，原因 : " + msg);                }                closeProgressDialog();            } else if (tag.equals(HttpProcess.QRY_PERSON) && "QRY_PERSON_BORROW".equals(application.cardType)) {                boolean result = intent.getBooleanExtra(MyApplication.CMD_RESULT, false);                String msg = intent.getStringExtra(MyApplication.CMD_MSG);                if (result) {                    String stuNo = intent.getStringExtra("rybh");                    String stuName = intent.getStringExtra("xm");                    String orgId = application.equInfoModel.orgId;                    String equName = application.equInfoModel.equName;                    // TODO                    if (application.dialog != null && application.dialog.isShowing()) {                        application.dialog.dismiss();                    }                } else {                    Log.e(TAG, tag + " " + msg);                    application.showToast("查询人员失败，原因 : " + msg);                }                closeProgressDialog();            }        }    }    @Override    protected void onStart() {        super.onStart();        application.handler_touch.removeMessages(0);        application.handler_touch.sendEmptyMessageDelayed(0, application.screensaver_time * 1000);    }    @Override    protected void onResume() {        super.onResume();        application.destroyFloating();    }    @Override    protected void onDestroy() {        super.onDestroy();        imageLoader.clearCache();        imageLoader.cancelTask();        broadcastManager.unregisterReceiver(myBroadcastReceiver);    }    @Override    public boolean dispatchKeyEvent(KeyEvent event) {        switch (event.getAction()) {            case KeyEvent.ACTION_DOWN:                application.handler_touch.removeMessages(0);                break;            case KeyEvent.ACTION_UP:                application.handler_touch.sendEmptyMessageDelayed(0, application.screensaver_time * 1000);                break;        }        return super.dispatchKeyEvent(event);    }    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        switch (ev.getAction()) {            case MotionEvent.ACTION_DOWN:                application.handler_touch.removeMessages(0);                break;            case MotionEvent.ACTION_UP:                application.handler_touch.sendEmptyMessageDelayed(0, application.screensaver_time * 1000);                break;        }        return super.dispatchTouchEvent(ev);    }    private void showProgressDialog() {        if (progressDialog == null) {            progressDialog = ProgressDialog.show(this, null, "加载中", false, false);        }    }    private void closeProgressDialog() {        if (progressDialog != null && progressDialog.isShowing()) {            progressDialog.dismiss();            progressDialog = null;        }    }}