package com.yy.doorplate.database;import java.util.ArrayList;import java.util.List;import android.content.ContentValues;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import com.yy.doorplate.MyApplication;import com.yy.doorplate.model.PersonnelAttendanceModel;public class PersonnelAttendanceDatabase {    private static final String TABLE = "PersonnelAttendance";    private SQLiteDatabase sqLiteDatabase;    private static final String TAG = "PersonnelAttendanceDatabase";    private void openDB() {        try {            sqLiteDatabase = SQLiteDatabase.openOrCreateDatabase(                    MyApplication.DATABASE, null);        } catch (Exception e) {            e.printStackTrace();        }    }    private void create() {        String sql = "create table if not exists " + TABLE + "("                + "id verchar(20) UNIQUE," + "date verchar(20),"                + "toWorkTime verchar(10)," + "offWorkTime verchar(10),"                + "rybh verchar(20)," + "xm verchar(20)," + "js verchar(5),"                + "isToWorkClock verchar(5)," + "isOffWorkClock verchar(5),"                + "status verchar(5)," + "cardid verchar(20),"                + "toWorkClockTime verchar(20),"                + "offWorkClockTime verchar(20)" + ")";        try {            sqLiteDatabase.execSQL(sql);        } catch (Exception e) {            e.printStackTrace();        }    }    private void initDB() {        openDB();        create();    }    public synchronized List<PersonnelAttendanceModel> query(String selection,                                                             String[] selectionArgs) {        initDB();        Cursor cursor = null;        try {            cursor = sqLiteDatabase.query(TABLE, null, selection,                    selectionArgs, null, null, "toWorkTime,offWorkTime asc",                    null);        } catch (Exception e) {            e.printStackTrace();        }        if (cursor == null) {            return null;        }        List<PersonnelAttendanceModel> list = new ArrayList<PersonnelAttendanceModel>();        while (cursor.moveToNext()) {            PersonnelAttendanceModel model = new PersonnelAttendanceModel();            model.id = cursor.getString(0);            model.date = cursor.getString(1);            model.toWorkTime = cursor.getString(2);            model.offWorkTime = cursor.getString(3);            model.rybh = cursor.getString(4);            model.xm = cursor.getString(5);            model.js = cursor.getString(6);            model.isToWorkClock = cursor.getString(7);            model.isOffWorkClock = cursor.getString(8);            model.status = cursor.getString(9);            try {                model.cardid = cursor.getString(10);                model.toWorkClockTime = cursor.getString(11);                model.offWorkClockTime = cursor.getString(12);            } catch (Exception e) {                e.printStackTrace();            }            list.add(model);        }        close();        if (cursor.getCount() == 0) {            cursor.close();            return null;        } else {            cursor.close();            return list;        }    }    public synchronized void insert(PersonnelAttendanceModel model) {        initDB();        ContentValues values = new ContentValues();        values.put("id", model.id);        values.put("date", model.date);        values.put("toWorkTime", model.toWorkTime);        values.put("offWorkTime", model.offWorkTime);        values.put("rybh", model.rybh);        values.put("xm", model.xm);        values.put("js", model.js);        values.put("isToWorkClock", model.isToWorkClock);        values.put("isOffWorkClock", model.isOffWorkClock);        values.put("status", model.status);        try {            values.put("cardid", model.cardid);            values.put("toWorkClockTime", model.toWorkClockTime);            values.put("offWorkClockTime", model.offWorkClockTime);            sqLiteDatabase.replace(TABLE, null, values);        } catch (Exception e) {            e.printStackTrace();        }        close();    }    public synchronized void update(PersonnelAttendanceModel model) {        initDB();        String whereClause = "id = " + model.id;        ContentValues values = new ContentValues();        values.put("id", model.id);        values.put("date", model.date);        values.put("toWorkTime", model.toWorkTime);        values.put("offWorkTime", model.offWorkTime);        values.put("rybh", model.rybh);        values.put("xm", model.xm);        values.put("js", model.js);        values.put("isToWorkClock", model.isToWorkClock);        values.put("isOffWorkClock", model.isOffWorkClock);        values.put("status", model.status);        try {            values.put("cardid", model.cardid);            values.put("toWorkClockTime", model.toWorkClockTime);            values.put("offWorkClockTime", model.offWorkClockTime);            sqLiteDatabase.update(TABLE, values, whereClause, null);        } catch (Exception e) {            e.printStackTrace();        }        close();    }    public synchronized void panduan(String id) {        initDB();        String sql = "delete from " + TABLE + " where id = '" + id + "'";        try {            sqLiteDatabase.execSQL(sql);        } catch (Exception e) {            e.printStackTrace();        }        close();    }    public synchronized void delete(String id) {        initDB();//		String sql = "delete from " + TABLE + " where id = '" + id + "'";        try {            String sql ="if NOT exists(SELECT * FROM  " + TABLE + "  WHERE id= '" + id + "') ";            sqLiteDatabase.execSQL(sql);        } catch (Exception e) {            e.printStackTrace();        }        close();    }    public synchronized void delete_all() {        initDB();        String sql = "delete from " + TABLE;        try {            sqLiteDatabase.execSQL(sql);        } catch (Exception e) {            e.printStackTrace();        }        close();    }    public synchronized void drop() {        initDB();        String sql = "DROP TABLE " + TABLE;        try {            sqLiteDatabase.execSQL(sql);        } catch (Exception e) {            e.printStackTrace();        }        close();    }    private void close() {        try {            sqLiteDatabase.close();        } catch (Exception e) {            e.printStackTrace();        }    }}